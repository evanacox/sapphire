var searchIndex = JSON.parse('{\
"filetest":{"doc":"","t":"AAFAAAFAHGMFFFRFFFFFFFRFFFFAAAAAAAAAAAFFFFFFFFFFFFOFFFFFFNRNDDELLLLLLMLLLLLLLLMFLMMLMLLLLLLLLLENNNDNNNNNNELLLLLLLMLLLLLLLLLLFFFFLLLLLLLLLLLLLFFFFLLLLLLLLLLLMMMM","n":["discovery","display","main","runner","runners","subtest","subtest","testcase","ALL_TEST_CASES","DirectoryContents","base","cases_in_subdir","init_directory","recursive_build","PAD_TO_START_OF_LINE","prettify_diff","prettify_failure","print_failure","print_subtest_header","print_subtest_result","print_summary","test_results","SUBTESTS","pool_for_jobs","run_all","run_subtest","run_tests","dce","domtree","flowgraph","gvn","isel_x86","lsra_x86","mem2reg","optimization_runner","parse","simplifyinst","split_crit_edges","dce","dce_subtest","domtree_subtest","domtree_test","gvn","gvn_subtest","isel_greedy_x86_64","isel_greedy_x86_subtest","lsra_x86","lsra_x86_subtest","mem2reg","mem2reg_subtest","runner_for_opt","parse_subtest","parser_output","simplifyinst","simplifyinst_subtest","split_crit_edges","split_crit_edges_subtest","CompileError","FAILURE","Output","Subtest","TestDetails","TestResult","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","elapsed","from","from","from","into","into","into","main_subdir","new","output","panic_hook","run","runner","subdir","subdirs","subdirs","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Check","CompileError","CompileError","Diff","FileTestCase","IndividualChecks","LackOfCompileError","MatchEntireFile","MatchSection","Missing","Panic","TestFailure","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","check","clone","clone","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","find_checks","find_individual_checks","find_match_section","first_line","fmt","fmt","fmt","from","from","from","from_raw","hash","hash","hash","into","into","into","match_checks","match_compile_error","match_entire_file","match_section","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","check","expected","full","got"],"q":[[0,"filetest"],[8,"filetest::discovery"],[14,"filetest::display"],[22,"filetest::runner"],[27,"filetest::runners"],[38,"filetest::runners::dce"],[40,"filetest::runners::domtree"],[42,"filetest::runners::gvn"],[44,"filetest::runners::isel_x86"],[46,"filetest::runners::lsra_x86"],[48,"filetest::runners::mem2reg"],[50,"filetest::runners::optimization_runner"],[51,"filetest::runners::parse"],[53,"filetest::runners::simplifyinst"],[55,"filetest::runners::split_crit_edges"],[57,"filetest::subtest"],[94,"filetest::testcase"],[156,"filetest::testcase::TestFailure"],[160,"alloc::string"],[161,"core::option"],[162,"bpaf"],[163,"alloc::vec"],[164,"ahash::random_state"],[165,"std::collections::hash::map"],[166,"std::path"],[167,"core::time"],[168,"threadpool"],[169,"std::io::error"],[170,"core::panic::panic_info"],[171,"std::sync::mpsc"],[172,"core::result"],[173,"core::any"],[174,"core::fmt"],[175,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,18,0,0,0,18,12,13,18,12,13,12,18,12,13,18,12,13,13,13,12,0,13,13,12,13,13,18,12,13,18,12,13,18,12,13,0,23,24,23,0,24,23,24,24,23,23,0,23,24,6,23,24,6,6,6,23,24,23,24,23,24,6,23,24,6,0,0,0,0,23,24,6,23,24,6,6,23,24,6,23,24,6,0,0,0,0,23,24,23,24,6,23,24,6,23,24,6,30,31,30,31],"f":[0,0,[[],1],0,0,0,[[],[[0,[[4,[[3,[2]]]]]]]],0,0,0,0,[5,[[7,[[1,[2,2,6]]]]]],[[],[[10,[2,[8,[[1,[2,2,6]]]],9]]]],[[[10,[2,[8,[[1,[2,2,6]]]],9]],2,11],1],0,[[5,5],2],[12,2],[[2,2],1],[13,1],[[5,12],[[3,[[1,[2,2]]]]]],[[14,14,15],1],[12,[[1,[2,[3,[2]]]]]],0,[[[3,[14]]],16],[[[3,[14]]],[[17,[1]]]],[[5,[3,[14]]],[[17,[1]]]],[[[7,[13]],16],[[17,[1]]]],0,0,0,0,0,0,0,0,0,0,0,[[5,5],18],[[],13],[[],13],[[5,5],18],[[5,5],18],[[],13],[[5,5],18],[[],13],[[5,5],18],[[],13],[[5,5],18],[[],13],0,[[],13],[[5,5],18],[[5,5],18],[[],13],[[5,5],18],[[],13],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,5],[[[7,[5]]],13],0,[19,1],[[13,16],[[20,[[1,[5,12]]]]]],0,0,[13,[[7,[5]]]],0,[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,18],[[21,[1,23]]]],0,[23,23],[24,24],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[23,23],25],[[24,24],25],[[6,6],25],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[5,5],24],[5,24],[5,24],[5,[[3,[[1,[5,5]]]]]],[[23,26],27],[[24,26],27],[[6,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,5],6],[[23,-1],1,28],[[24,-1],1,28],[[6,-1],1,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[18,[7,[5]]],[[21,[1,23]]]],[[18,5],[[21,[1,23]]]],[[18,5],[[21,[1,23]]]],[[18,5],[[21,[1,23]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],0,0,0,0],"c":[],"p":[[15,"tuple"],[3,"String",160],[4,"Option",161],[8,"Parser",162],[15,"str"],[3,"FileTestCase",94],[15,"slice"],[3,"Vec",163],[3,"RandomState",164],[3,"HashMap",165],[3,"PathBuf",166],[3,"TestDetails",57],[3,"Subtest",57],[15,"usize"],[3,"Duration",167],[3,"ThreadPool",168],[6,"Result",169],[4,"TestResult",57],[3,"PanicInfo",170],[3,"Receiver",171],[4,"Result",172],[3,"TypeId",173],[4,"TestFailure",94],[4,"Check",94],[15,"bool"],[3,"Formatter",174],[6,"Result",174],[8,"Hasher",175],[6,"DirectoryContents",8],[13,"Missing",156],[13,"Diff",156]]},\
"sapphire":{"doc":"Sapphire","t":"AOAOAAOACAAFAAADDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDQDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDNENEENNNLLLLLLLLLLLLFFFLLLLFLLLLLLLFMLLLLFFMFLLFFLLLLLLLLLLLLFMFNNDDQINNQDDEDDIDDGQNIEDNGIGNDDNQINDDDDDDDDDDINNQDEIDDDDIDEGDIDNNNDNEIDDENDDDEDNNNNLLLLLLKLLKLKLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLKKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLMLLKKKKLLKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKKLKKKKLMLLLKLMLKLLLLLLLKLLLMLMLLLLLLLLLLLLLLLLLLLLLAKLLLMKLLLLLKLKKLLLLLLLLKKLLLFLLLLLLLLKMKKLLLKLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKMLMLLLLALLLMMMMDIFFFFFLLLLFFFFFFFFLFFFFFFFFFFFFLFFFFFKLKLFFFKLKLFFFFFFFFFFFFFLLLLFFFFFFFNNDNENNNNNNNNDNDNDNEEDNDNSSSSSSSDDDNNNNNNDDNENDNNNNNDDNDNNNEDNEDNENNDNDNNNSSDNNNDNDNDNDNDNDNDNDNNNNNNNDNDNDNNNNNDNDNDNSSNNNSSSSSSSSSSSSSSSSSSSNNNNEEENNNNDNNNNNSSSNEDNDNNNNNNNNDDDNNDNEDDDDNDEENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMMMMMLLLLMMMMMMMMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMLLNNNDNDGDDNNNDNDNIDDDDNNDNNEDDGNDIIEDDNNNDNDNNDENDNNNNNNNNNDNEDDDDDDIDDINDNNDENDNNNNNDNDDDNIEDIDNNDNDDDDNSSSSSSNNNDNNNNNNNNDNNNDGDNDNDDGNNNINNNNNDNNDDDNNDNDDNDDNNINDDNNNNNNNNNNNNNNEINDNDDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLKKKKKKKKKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLLLLLLLDDIFFFFFFFFFFLLLLFFFFFFFFFFFFFLLFFFFFFFFFFFFLLFFFFFFFKLLKLLFFFFFFFFFFFFFFFFLLLLLLFFFFFFFFFGDDIDDIDIDIDQQLLLLLLOLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNENNNNNNNNDNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNENNDNNNNNNNNNNNNNNNNENNNNNNGDNNNNNNNNNNNNNNNNNNNNNNDENNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMLFLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDFLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLFLLLLLLLLLLFLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLDLLLFLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIQIDDGGDDDDDLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLKLLLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNINNENNNNDNLLLLLLLLKKKLLLLLLK","n":["analysis","analysis_preserved","arena","arena_key","cli","codegen","dense_arena_key","ir","parse_sir","pass","reader2","run_passes","transforms","utility","vm","ControlFlowGraph","ControlFlowGraphAnalysis","DominanceFrontier","DominanceFrontierAnalysis","DominatorTree","DominatorTreeAnalysis","ModuleStringifyAnalysis","ModuleWriter","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone_into","compute","compute","compute","compute_postorder","compute_tree_dfs_preorder","dominates","expects_preserved","expects_preserved","expects_preserved","expects_preserved","fmt","from","from","from","from","from","from","from","from","frontier","func","idom","inst","into","into","into","into","into","into","into","into","is_pred_of","is_reachable","is_succ_of","module","n_predecessors","n_successors","nodes","postorder","predecessors","print_module","reverse_postorder","root","root","run","run","run","run","strictly_dominates","stringify_module","successors","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","ArenaKey","ArenaMap","IntoIter","Item","Keys","SecondaryMap","SecondarySet","UniqueArenaMap","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","cardinality","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","contains","contains","default","default","default","default","deserialize","deserialize","deserialize","deserialize","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fill","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","get","get","get","get_mut","get_mut","hash","index","index","index","index_mut","index_mut","insert","insert","insert","insert","insert_clone_if","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","iter","iter","iter","iter_mut","iter_mut","key_index","key_new","keys","keys","keys","keys","last","last","last_mut","len","len","len","len","map_all_keys","map_keys","map_some_keys","new","new","new","new","next","next","next_back","next_back","next_key","next_key","remove","remove","reserve","reserve","reserve","reserve_exact","reserve_exact","serialize","serialize","serialize","serialize","shrink_to_fit","shrink_to_fit","shrink_to_fit","size_hint","size_hint","take","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","values","values","values","values_mut","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_primary","with_primary","Asm","BaseOptions","Bitcode","FramePointer","IR","IRFormat","MachineFormat","NeverOmit","Obj","OmitWhenPossible","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","emit_machine_format","emit_sir","eq","eq","equivalent","equivalent","frame_pointer","from","from","from","from","from_str","from_str","from_str","inputs","inputs","into","into","into","into","jobs","output","output","passes","to_owned","to_owned","tool","tool_with","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verbose","verbose","verify","Aarch64","Aarch64Linux","AggregateLayout","Allocation","Arch","Architecture","Arm64Windows","Arm64macOS","AssemblyFormat","AvailableRegisters","Backend","CPUArch","CallUseDef","CallUseDefId","CallingConv","CodegenOptions","ConservativeLiveIntervals","Ctx","Data","Debug3Reg","Emitter","Extern","FixedIntervals","Float","FramelessCtx","FuncData","FuncFramePair","Function","GenericISel","GraphColoringRegAlloc","InReg","Inst","InstructionSelector","Int","LegalizeAggregatesForABI","LinearScanRegAlloc","LiveInterval","LiveRanges","LoweringContext","MIRBlock","MIRBlockInterval","MIRFuncData","MIRFunction","MIRModule","MachInst","Normal","Object","ObjectCodeFormat","PReg","ParallelCopyLocation","Platform","PresetBackends","PresetTargets","ProgramPoint","ProgramPoints","ProgramPointsIterator","Reg","RegClass","RegCollector","RegToRegCopy","RegisterAllocator","RegisterMapping","RelativeToFP","RelativeToSP","Reload","Rewriter","Spill","SpillReload","StackFrame","StackRegAlloc","Target","TargetPair","Temporary","TypeLayout","UnconditionalBranch","VReg","VariableLocation","WriteableReg","X86_64","X86_64Linux","X86_64Windows","X86_64macOS","able_to_merge_with","add_constant","add_fixed_interval","align","all_instructions","all_intervals","allocate","allocate","allocate","as_copy","as_preg","as_unconditional_jmp","as_vreg","assembly","assembly","associated_val","before","begin_caller_defined_fixed_interval","begin_fixed_interval","begin_fixed_intervals","begin_linear_lowering","between","block","blocks","bool_layout","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_use_defs","class","class","class","clobbered","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","compute","compute","constrain_result","copy","cpu","cpu","data","debug_3reg","default","default","default","default_calling_convention","default_stack_frame","defined_before_func","defs","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","emit","end_caller_defined_fixed_interval","end_fixed_interval","end_fixed_intervals","end_linear_lowering","ends_after","ends_before","ends_before_without_overlap","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","externals","f32_layout","f64_layout","first_defined_after","fixed_intervals","float","float","float_defs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_for_func","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_aggregate","from_indices","from_mir","from_preg","from_reg","from_str","from_vreg","func","functions","functions_mut","generate_epilogue","generate_prologue","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","high_priority_temporaries","hw_number","hw_number","i16_layout","i32_layout","i64_layout","i8_layout","identity","identity","instruction_pointer","instruction_pointer","int","int","integral_defs","intervals","intervals_for","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_copy","is_copy","is_merged","is_nop_copy","is_nop_copy","is_preg","is_reserved","is_reserved","is_reserved","is_reserved","is_reserved","is_ret","is_spill_interval","is_unconditional_jmp","is_unconditional_jmp","is_vreg","key_index","key_index","key_index","key_index","key_index","key_index","key_index","key_index","key_new","key_new","key_new","key_new","key_new","key_new","key_new","key_new","last_use_copy","last_used_by","layout_of","linux_x86_64","load","lower","lower","lower_call","lower_indirect_call","lower_parameter","lower_ret","mac_os_x86_64","mapping","mapping_at","mark_merged_with","maybe_result_reg","metadata","mir_block","module","name","new","new","new","new_callcc","new_for","new_frame","next","next_vreg","object","object","offset","offset_of_next","omit_frame_pointer","options","options","overlaps","padding","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","patterns","physical_regs","physical_regs","prepare_for","prepare_for_func","preserved","preserved_reg_used","program_order","program_order_mut","program_points","program_points","program_points","ptr_layout","reference_external_func","register_use_def_call","registers","reload_points","reserved","reserved","reserved","reserved","reserved","resolve","result_reg","ret_uses","rewrite","rewrite","rewrite_with","run","schedule_parallel_copies","serialize","serialize","serialize","serialize","serialize","serialize","size","spill","spill_slot","spills","stack_size","stack_slot","started_by_copy","starts_after","starts_before","store","symbols","take_data","take_insts","take_reload_points","target","to","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_reg","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unavailable","uses","uses","val_class","width","windows_x86_64","with_allocation","with_class","with_class","x86_64","x86_64_debug_no_reg_alloc","x86_64_optimized","x86_64_unoptimized","from","from","to","to","BasicISelMergeMatcher","ISelMergeMatcher","and","and_with","any","ashr","ashr_with","borrow","borrow_mut","clone","clone_into","fadd","fadd_with","fdiv","fdiv_with","fmul","fmul_with","frem","frem_with","from","fsub","fsub_with","iadd","iadd_with","icmp","icmp_with","iconst","iconst_of","iconst_val","imm32","imul","imul_with","into","isub","isub_with","load","lshr","lshr_with","mark_as_merged_base","mark_as_merged_base","mark_as_merged_operand","mark_as_merged_operand","mark_merged","mark_merged_operand","matches","matches_as_base","matches_as_base","matches_as_operand","matches_as_operand","matches_operand","merge_if_matches","merge_if_matches_operand","neg1","or","or_with","phi","sdiv","sdiv_with","shl","shl_with","srem","srem_with","to_owned","try_from","try_into","type_id","udiv","udiv_with","urem","urem_with","xor","xor_with","zero","A","AE","ALU","ALU","ALUOpcode","Add","Add","And","Array","B","BE","Byte","Byte","Call","Call","Cdq","Cdq","Cmp","Cmp","ConditionCode","Constant","Cqo","Cqo","Cwd","Cwd","DEST","DEST","DEST","DIVIDEND_HI","DIVIDEND_HI","DIVIDEND_LO","DIVIDEND_LO","Debug3RegLinuxX86_64","Debug3RegStackFrame","Div","Div","Div","Dword","E","ELF","Eight","Emit","FloatArith","FloatArith","FloatArithOpcode","Four","FrameInfo","G","GE","GNU","GNUIntel","Global","GreedyISel","IDiv","IDiv","IMul","IMul","Imm","Imm","IndirectAddress","IndirectCall","IndirectCall","Inst","Jump","Jump","JumpTarget","L","LE","Lea","Lea","LinuxX86_64","Local","Long","MASM","MAXIMUM_OFFSET","MINIMUM_OFFSET","MacOSX86_64","MachO","Mem","Mem","Mov","Mov","MovFloatLoad","MovFloatLoad","MovFloatStore","MovFloatStore","MovStore","MovStore","Movabs","Movabs","Movaps","Movaps","Movsx","Movsx","Movzx","Movzx","Mul","NASM","NE","NO","NS","NZ","Neg","Neg","Nop","Nop","Not","Not","O","One","Or","PE","PXor","PXor","Pop","Pop","Push","Push","QUOTIENT","QUOTIENT","Quad","QuadLabel","Qword","R10","R11","R12","R13","R14","R15","R8","R9","RAX","RBP","RBX","RCX","RDI","RDX","REMAINDER","REMAINDER","RIP","RSI","RSP","Reg","Reg","Reg","Reg","RegImm","RegMem","RegMemImm","RegOffset","RegReg","RegScaledReg","RegScaledRegIndex","Ret","Ret","RipGlobal","RipLocalData","RipLocalLabel","S","SRC","SRC","SRC","Sar","Scale","ScaleAnd30BitOffset","ScaledReg","Set","Set","Shl","Short","Shr","StackOffset","String","Sub","Sub","SystemVCallingConv","SystemVStackFrame","Test","Test","Two","Ud2","Ud2","Width","WidthPair","WindowsX64CallingConv","WindowsX64StackFrame","WindowsX86_64","Word","X86_64","X86_64Assembly","X86_64ObjectFile","Xmmword","Xor","Z","as_copy","as_unconditional_jmp","assembly","bool_layout","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","call_use_defs","call_use_defs","call_use_defs","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","condition","condition","copy","cpu","default","default_calling_convention","default_calling_convention","default_calling_convention","default_calling_convention","default_stack_frame","default_stack_frame","default_stack_frame","default_stack_frame","defs","dest","dest","dest","dest","dest","dest","dest","dest","dest","dest","dest","dest_bits","dest_bytes","dest_width","divisor","divisor","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expand","f32_layout","f64_layout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format","format_reg","frame_for_func","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bytes","from_bytes","from_str","from_str","from_widths","func","func","generate_epilogue","generate_epilogue","generate_epilogue","generate_prologue","generate_prologue","generate_prologue","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i16_layout","i32_layout","i64_layout","i8_layout","id","id","instruction_pointer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","is_copy","is_ret","lhs","lhs","lhs","lhs","lhs","lhs","load","lower","lower_call","lower_call","lower_indirect_call","lower_indirect_call","lower_parameter","lower_parameter","lower_parameter","lower_ret","lower_ret","lower_ret","metadata","metadata","metadata","new","new","object","offset","opc","opc","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","physical_regs","preserved_reg_used","preserved_reg_used","preserved_reg_used","ptr_layout","reg","reg","register_use_def_call","register_use_def_call","register_use_def_call","registers","registers","registers","ret_uses","ret_uses","ret_uses","rewrite","rhs","rhs","rhs","rhs","rhs","rhs","scale","spill_slot","spill_slot","spill_slot","src","src","src","src","src","src","src","src","src_bits","src_bytes","src_width","stack_offset","stack_size","stack_size","stack_size","stack_slot","stack_slot","stack_slot","store","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uses","value","value","visit_alloca","visit_and","visit_ashr","visit_bconst","visit_br","visit_btoi","visit_call","visit_condbr","visit_elemptr","visit_extract","visit_fadd","visit_fcmp","visit_fconst","visit_fdiv","visit_fext","visit_fmul","visit_fneg","visit_frem","visit_fsub","visit_ftosi","visit_ftoui","visit_ftrunc","visit_globaladdr","visit_iadd","visit_icmp","visit_iconst","visit_imul","visit_indirectcall","visit_insert","visit_isub","visit_itob","visit_itop","visit_load","visit_lshr","visit_null","visit_offset","visit_or","visit_ptoi","visit_ret","visit_sdiv","visit_sel","visit_sext","visit_shl","visit_sitof","visit_srem","visit_stackslot","visit_store","visit_trunc","visit_udiv","visit_uitof","visit_undef","visit_unreachable","visit_urem","visit_xor","visit_zext","width","width","width","width","width","width","width","width","width","width","width","width","widths","widths","wrap","xmm","AShr","After","Alloca","AllocaInst","And","AppendBuilder","ArithInst","ArithmeticInst","Array","Array","At","BConst","BConstInst","BToI","BasicBlock","Before","BinaryInst","Block","BlockIter","BlockWithParams","Bool","Bool","Br","BrInst","C","Call","CallConv","CallInst","CastInst","CommutativeArithInst","CondBr","CondBrInst","Cursor","CursorMut","CursorPos","DataFlowGraph","DebugInfo","Double","EQ","ElemPtr","ElemPtrInst","Extract","ExtractInst","FAdd","FCmp","FCmpInst","FCmpOp","FConst","FConstInst","FDiv","FExt","FMul","FNeg","FRem","FSub","FToSI","FToUI","FTrunc","Float","Float","FloatFormat","FloatUnaryInst","Func","FuncBuilder","FuncCursor","FuncView","Function","FunctionCursorVisitor","FunctionDefinition","FunctionMetadata","GenericInstVisitor","GlobalAddr","GlobalAddrInst","IAdd","ICmp","ICmpInst","ICmpOp","IConst","IConstInst","IMul","ISub","IToB","IToP","IndirectCall","IndirectCallInst","Insert","InsertBuilder","InsertInst","Inst","Inst","InstBuilder","InstData","InstIter","Instruction","Int","Int","LShr","Layout","Load","LoadInst","Module","ModuleContext","ModuleIdentity","NE","NOALIAS","NOALIAS","NONE","NONE","NONNULL","NONNULL","None","Nothing","Null","NullConstInst","OEQ","OGE","OGT","OLE","OLT","ONE","ORD","Offset","OffsetInst","Or","PToI","Param","ParamAttributes","ParamTy","Ptr","Ptr","ReplaceBuilder","Ret","RetAttributes","RetInst","RetTy","SDiv","SGE","SGT","SIRVisitor","SIToF","SLE","SLT","SRem","Sel","SelInst","Sext","Shl","Sig","SigBuilder","Signature","Single","Some","StackSlot","StackSlot","StackSlotData","StackSlotInst","Store","StoreInst","Struct","Struct","SysV","Terminator","Trunc","Type","TypePool","UDiv","UEQ","UGE","UGE","UGT","UGT","UIToF","ULE","ULE","ULT","ULT","UNE","UNO","URem","UType","UnaryInst","Undef","UndefConstInst","Unreachable","UnreachableInst","Value","ValueDef","Win64","Xor","Zext","__operands_dfg_mut","__operands_dfg_mut","__operands_dfg_mut","__operands_dfg_mut","abi","aggregate","aggregate","aggregate_ty","all_blocks","all_single_use_values","alloc_ty","alloca","alloca","and","and","append","append_block","append_block_param","append_block_param","append_entry_params","append_inst","args","args","args","array","array","as_array","as_bool","as_float","as_int","as_ptr","as_struct","ashr","ashr","base","base","bconst","bconst","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","block","block","block_first_inst","block_last_inst","block_name","block_name","block_name","block_next","block_params","block_params","block_params","block_prev","blocks","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","br","branch_info","branch_info","branch_info","btoi","btoi","build","build","build","build","build","build_inst","build_inst","build_result","build_result","byval","byval_size","call","call","callee","callee","calling_conv","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","col","compute_metadata","condbr","condbr","condition","condition","constant_raw","context","create_block","create_block","create_block","create_block","create_block_after","create_block_after","create_block_after","create_block_before","create_block_before","create_block_before","create_inst","create_stack_slot","create_stack_slot","ctx","ctx","current_block","current_block","current_block","current_block_terminator","current_block_terminator","current_block_terminator_targets","current_block_terminator_targets","current_func","current_inst","current_inst","current_inst_dbg","current_inst_dbg","current_signature","cursor","debug","declare_function","def","def","def","def_mut","def_mut","default","default","default","default","default","define","define_existing_function","define_function","definition","definition_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dfg","dfg","dfg","dfg","dfg","dfg","dfg","dfg","dispatch_blocks","dispatch_blocks","dispatch_blocks","dispatch_blocks","dispatch_funcs","dispatch_funcs","dispatch_inst","dispatch_inst","dispatch_inst","dispatch_inst","dispatch_insts","dispatch_insts","dispatch_insts","dispatch_insts","element","elemptr","elemptr","entry_block","entry_block","entry_block","entry_block","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract","extract","f32","f64","fadd","fadd","fake","false_branch","fcmp","fcmp","fconst","fconst","fconst_raw","fconst_raw","fdiv","fdiv","fext","fext","file","find_block","find_block","find_function_by_name","find_function_by_name","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmul","fmul","fneg","fneg","format","frem","frem","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_vec","fsub","fsub","ftosi","ftosi","ftoui","ftoui","ftrunc","ftrunc","func","func","func_mut","func_mut","function","function","function_mut","function_mut","functions","given_value","globaladdr","globaladdr","goto_after","goto_after","goto_before","goto_before","goto_first_inst","goto_first_inst","goto_function_begin","goto_function_begin","goto_inst","goto_inst","goto_last_inst","goto_last_inst","has_alloca","has_result","has_result","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i16","i32","i64","i8","iadd","iadd","icmp","icmp","icmp_eq","icmp_eq","icmp_ne","icmp_ne","iconst","iconst","identity","if_false","if_true","import_signature","imul","imul","index","index","index","indirectcall","indirectcall","insert","insert","insert","insert","insert_block_after","insert_block_before","insert_inst_after","insert_inst_before","insert_sig","insert_string","inst_block","inst_block","inst_block","inst_data","inst_data","inst_data","inst_debug","inst_debug","inst_debug","inst_next","inst_prev","inst_to_result","inst_to_result","inst_to_result","inst_to_result","insts_in_block","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_aggregate","is_array","is_block_inserted","is_block_inserted","is_block_param","is_bool","is_bool_or_int","is_byval","is_commutative","is_commutative","is_commutative","is_commutative","is_constant","is_decl","is_empty","is_entry_block","is_entry_block","is_entry_block","is_f32","is_f64","is_float","is_float_of_format","is_i16","is_i16","is_i32","is_i32","is_i64","is_i64","is_i8","is_i8","is_inst_inserted","is_inst_inserted","is_int","is_int_of_width","is_leaf","is_noalias","is_noalias","is_nonnull","is_nonnull","is_ptr","is_reserved","is_reserved","is_reserved","is_reserved","is_reserved","is_reserved","is_reserved","is_stack_slot_inserted","is_struct","is_val_inserted","is_void","is_volatile","is_volatile","isub","isub","itob","itob","itop","itop","key_index","key_index","key_index","key_index","key_index","key_index","key_new","key_new","key_new","key_new","key_new","key_new","layout","layout","layout","layout","len","len_blocks","len_insts","lhs","lhs","line","load","load","load_volatile","load_volatile","loc_compare","lshr","lshr","mask","mask","matchers","members","module","name","name","name","name","name","name","new","new","new","new","new","new","new","new","next","next","next_block","next_block","next_inst","next_inst","next_value","null","null","offset","offset","offset","offset_ty","op","op","opc","operand","operand","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","operands","or","or","over","over","pack","param","param_with_attribute","params","params","params","params_with_attributes","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pointer","pointer","pos","pos","pos","prev_block","prev_block","prev_inst","prev_inst","ptoi","ptoi","ptr","remove_block","remove_block","remove_block","remove_block_param","remove_block_param","remove_block_param","remove_inst","remove_inst","remove_inst","remove_inst_and_move_back","remove_inst_and_move_back","remove_inst_if_exists","remove_stack_slot","remove_stack_slot","remove_stack_slot","replace","replace","replace_branch_arg","replace_branch_arg","replace_branch_arg","replace_inst","replace_uses_with","replace_uses_with","replace_uses_with","reserved","reserved","reserved","reserved","reserved","reserved","reserved","result","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","result_ty","ret","ret","ret","ret_val","ret_val","ret_void","ret_void","ret_with_attribute","return_attributes","return_complete","return_ty","return_ty","rewrite_branch_args","rewrite_branch_args","rewrite_branch_args","rewrite_branch_target","rewrite_branch_target","rewrite_branch_target","rewrite_to","rhs","rhs","sdiv","sdiv","sel","sel","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_pos","set_pos","set_pos","sext","sext","shl","shl","sig","sig","sign_bit","signature","signature","signature","sitof","sitof","slot","srem","srem","stack_slot","stack_slot","stack_slot","stack_slots","stackslot","stackslot","store","store","store_volatile","store_volatile","stored","strings","strings_mut","strip_name","structure","structure","switch_to","target","targets","targets","targets","targets","targets","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","true_branch","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_pool","type_pool_mut","types","types_mut","udiv","udiv","uitof","uitof","undef","undef","unpack","unreachable","unreachable","unwrap_array","unwrap_bool","unwrap_float","unwrap_int","unwrap_ptr","unwrap_struct","urem","urem","uses_of","val_debug","val_debug","value","value","value","value","value","value_def","value_def","value_def","value_to_inst","value_to_inst","value_to_inst","vararg","vararg","visit_alloca","visit_alloca","visit_and","visit_and","visit_ashr","visit_ashr","visit_bconst","visit_bconst","visit_block","visit_block","visit_block","visit_block","visit_br","visit_br","visit_btoi","visit_btoi","visit_call","visit_call","visit_condbr","visit_condbr","visit_elemptr","visit_elemptr","visit_extract","visit_extract","visit_fadd","visit_fadd","visit_fcmp","visit_fcmp","visit_fconst","visit_fconst","visit_fdiv","visit_fdiv","visit_fext","visit_fext","visit_fmul","visit_fmul","visit_fneg","visit_fneg","visit_frem","visit_frem","visit_fsub","visit_fsub","visit_ftosi","visit_ftosi","visit_ftoui","visit_ftoui","visit_ftrunc","visit_ftrunc","visit_func","visit_func","visit_globaladdr","visit_globaladdr","visit_iadd","visit_iadd","visit_icmp","visit_icmp","visit_iconst","visit_iconst","visit_imul","visit_imul","visit_indirectcall","visit_indirectcall","visit_insert","visit_insert","visit_inst","visit_inst","visit_inst","visit_inst","visit_isub","visit_isub","visit_itob","visit_itob","visit_itop","visit_itop","visit_load","visit_load","visit_lshr","visit_lshr","visit_null","visit_null","visit_offset","visit_offset","visit_or","visit_or","visit_ptoi","visit_ptoi","visit_ret","visit_ret","visit_sdiv","visit_sdiv","visit_sel","visit_sel","visit_sext","visit_sext","visit_shl","visit_shl","visit_sitof","visit_sitof","visit_srem","visit_srem","visit_stackslot","visit_stackslot","visit_store","visit_store","visit_trunc","visit_trunc","visit_udiv","visit_udiv","visit_uitof","visit_uitof","visit_undef","visit_undef","visit_unreachable","visit_unreachable","visit_urem","visit_urem","visit_xor","visit_xor","visit_zext","visit_zext","walk","walk","walk","walk","width","with_name","xor","xor","zext","zext","BasicInstMatcher","BasicValMatcher","IRMatcher","and","and_with","ashr","ashr_with","bconst","bconst_val","binary","binary_with","block_param","block_param_of_ty","borrow","borrow","borrow_mut","borrow_mut","both","fadd","fadd_with","fcmp","fcmp_with","fconst","fconst_ty","fdiv","fdiv_with","fmul","fmul_with","frem","frem_with","from","from","fsub","fsub_with","iadd","iadd_with","icmp","icmp_with","iconst","iconst_ty","iconst_ty_val","iconst_val","imul","imul_with","into","into","isub","isub_with","load","lshr","lshr_with","matches","matches_inst","matches_inst","matches_inst","matches_inst","matches_val","matches_val","matches_val","null","null_float","null_int","null_integral","null_ty","one_of","or","or_with","power_of_two","sdiv","sdiv_with","shl","shl_with","srem","srem_with","stackslot","try_from","try_from","try_into","try_into","type_id","type_id","udiv","udiv_with","undef","urem","urem_with","val","val_of_ty","xor","xor_with","FAMProxy","FunctionAnalysisManager","FunctionAnalysisManagerModuleProxy","FunctionAnalysisPass","FunctionPassManager","FunctionToModulePassAdapter","FunctionTransformPass","ModuleAnalysisManager","ModuleAnalysisPass","ModulePassManager","ModuleTransformPass","PreservedAnalyses","Result","Result","adapt","add_analysis","add_analysis","add_pass","add_pass","all","analysis_preserved","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","expects_preserved","expects_preserved","expects_preserved","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get","initialize_for_ir","initialize_for_ir","intersect","into","into","into","into","into","into","into","invalidate","invalidate","invalidate","invalidate","invalidate","invalidate","invalidate","is_preserved","new","new","new","new","none","preserve","preserves_all","run","run","run","run","run","run","run","run","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wrap","AShr","Alloca","And","BConst","BToI","Binary","Bool","BoolLit","Br","ByVal","CCC","Call","CmpOpcode","Colon","Comma","CompareOpcode","CondBr","CurlyClose","CurlyOpen","Decimal","ElemPtr","Eq","Eq","Err","Error","Extract","F32","F64","FAdd","FCmp","FConst","FDiv","FExt","FMul","FNeg","FRem","FSub","FToSI","FToUI","FTrunc","FloatLitNaN","FloatLitRaw","FloatLitScientific","FloatLitStandard","FloatLiteral","Fn","GlobalAddr","GlobalIdent","Hex","I16","I32","I64","I8","IAdd","ICmp","IConst","IMul","ISub","IToB","IToP","IndirectCall","Insert","IntLitBinary","IntLitDecimal","IntLitHex","IntLitOctal","IntLiteral","LShr","LabelIdent","Lex","Load","LocalIdent","NaN","Ne","NoAlias","NonNull","Null","Octal","Oeq","Offset","Oge","Ogt","Ok","Ole","Olt","One","Opcode","Opcode","Or","Ord","PToI","ParenClose","ParenOpen","ParseResult","Parser","Ptr","Raw","Ret","SDiv","SIToF","SRem","Scientific","Sel","Sext","Sge","Sgt","Shl","Sle","Slt","SquareClose","SquareOpen","Stack","StackIdent","StackSlot","Standard","Store","SysV","TokPair","Token","Trunc","UDiv","UIToF","URem","Ueq","Uge","Ugt","Ule","Ult","Undef","Une","Unknown","Uno","Unreachable","Variadic","Void","Volatile","Win64","X","Xor","Zext","as_float_lit","as_int_lit","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","col","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_parse_error","format_verifier_error","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","is_at_end","len","line","new","new","next_token","pair","parse","parse_sir","peek_token","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tok","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AggressiveDCEPass","DominatorTreeWriterPass","GVNPass","Mem2RegPass","ModuleWriterPass","SCCPPass","SimplifyCFGPass","SimplifyInstPass","SplitCriticalEdgesPass","VerifyModulePass","aggressive_instruction_dce","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","common","from","from","from","from","from","from","from","from","from","from","gvn","into","into","into","into","into","into","into","into","into","into","mem2reg","run","run","run","run","run","run","run","run","run","run","split_crit_edges","stderr","stderr","stdout","stdout","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_module","verify_module_panic","with_writer","with_writer","InPlaceConstantFolder","borrow","borrow_mut","from","has_side_effect","into","rewrite_and_remove_block_param","rewrite_pad_branch_argument","try_fold","try_from","try_into","type_id","visit_alloca","visit_and","visit_ashr","visit_bconst","visit_br","visit_btoi","visit_call","visit_condbr","visit_elemptr","visit_extract","visit_fadd","visit_fcmp","visit_fconst","visit_fdiv","visit_fext","visit_fmul","visit_fneg","visit_frem","visit_fsub","visit_ftosi","visit_ftoui","visit_ftrunc","visit_globaladdr","visit_iadd","visit_icmp","visit_iconst","visit_imul","visit_indirectcall","visit_insert","visit_isub","visit_itob","visit_itop","visit_load","visit_lshr","visit_null","visit_offset","visit_or","visit_ptoi","visit_ret","visit_sdiv","visit_sel","visit_sext","visit_shl","visit_sitof","visit_srem","visit_stackslot","visit_store","visit_trunc","visit_udiv","visit_uitof","visit_undef","visit_unreachable","visit_urem","visit_xor","visit_zext","IntoIter","IntoTree","Node","Packable","PackedOption","RawSpinMutex","SaHashMap","SaHashSet","SpinMutex","Str","StringPool","ThreadPool","TinyArray","and_then","and_then_packed","as_slice","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","expand","expand_ref","expect","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_arr","from_iter","from_slice","from_small_vec","from_vec","get","hash","hash","hash","index","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_inline","is_none","is_reserved","is_reserved","is_some","is_spilled","iter","iter_mut","len","len","lock","lock","map","new","new","new","next","next_back","none","partial_cmp","partial_cmp","partial_cmp","replace","reserved","reserved","root","serialize","serialize","serialize","serialize","shift_increment","size_hint","some","stringify_tree","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unwrap","values","Array","Bool","Engine","Float32","Float64","GenericForeignValue","Int16","Int32","Int64","Int8","Runtime","Struct","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","register_external_function","run","run_c","try_from","try_from","try_into","try_into","type_id","type_id","with_module"],"q":[[0,"sapphire"],[15,"sapphire::analysis"],[121,"sapphire::arena"],[306,"sapphire::cli"],[372,"sapphire::codegen"],[1179,"sapphire::codegen::SpillReload"],[1183,"sapphire::codegen::patterns"],[1256,"sapphire::codegen::x86_64"],[2518,"sapphire::ir"],[4637,"sapphire::ir::matchers"],[4727,"sapphire::pass"],[4836,"sapphire::reader2"],[5104,"sapphire::transforms"],[5207,"sapphire::transforms::common"],[5274,"sapphire::utility"],[5444,"sapphire::vm"],[5474,"alloc::string"],[5475,"smallvec"],[5476,"alloc::vec"],[5477,"core::any"],[5478,"core::fmt"],[5479,"core::fmt"],[5480,"core::iter::traits::iterator"],[5481,"core::iter::traits::exact_size"],[5482,"core::result"],[5483,"core::hash"],[5484,"core::cmp"],[5485,"core::clone"],[5486,"serde::de"],[5487,"serde::de"],[5488,"core::hash"],[5489,"core::ops::function"],[5490,"serde::ser"],[5491,"serde::ser"],[5492,"core::slice::iter"],[5493,"std::path"],[5494,"bpaf::info"],[5495,"core::cmp"],[5496,"core::fmt"],[5497,"core::ops::function"],[5498,"core::mem"],[5499,"std::sync::rwlock"],[5500,"std::sync::rwlock"],[5501,"core::cmp"]],"d":["Contains the various analysis passes defined in the …","Allows an analysis to define any other analysis that it …","A simple typed arena module.","Creates a type-safe key for a <code>ArenaMap</code> and associated data …","Contains utility code specifically for the CLI tools …","APIs for the compiler back-end and code-generation …","Creates a type-safe key for a <code>ArenaMap</code> with <code>u32</code> as the …","Provides the interfaces and the types required to properly …","","Defines the pass infrastructure used by the middle-end of …","A hand-written parser and lexer meant to replace the …","A helper function that handles “run these passes …","Defines the “transform” passes in SIR’s …","Provides several utility APIs that are used inside of …","Provides APIs for the execution of SIR.","Models successor/predecessor information about the …","An analysis pass that wraps up a <code>ControlFlowGraph</code> into …","Models the dominance frontier information for a function.","Wrapper analysis that generates a <code>DominanceFrontier</code>.","Models the dominator tree for a given control-flow graph. …","Wrapper analysis that generates a <code>DominatorTree</code>.","This is an analysis that provides a <code>ModuleWriter</code> to any …","A simple SIR -&gt; text pass that takes in an entire module, …","Stringifies a whole block. This includes the block label, …","","","","","","","","","","","","","","","","","","","","Computes dominance information for a function.","Computes the dominance frontier of a given control-flow …","Directly computes flowgraph information for a given …","Directly computes a valid post-ordering of the blocks in …","Walks over the <strong>dominator tree</strong> in DFS preorder. This is only","Checks if <code>possible_dominator</code> dominates <code>block</code>. Both blocks …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the blocks in the dominance frontier of <code>block</code>.","Stringifies a whole function. This includes every block, …","Gets the immediate dominator of <code>block</code>, if one exists. The …","Stringifies an entire instruction. This includes the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if a given block <code>pred</code> is a predecessor of <code>block</code>","Checks if a block is reachable from the entry node","Checks if a given block <code>pred</code> is a successor of <code>block</code>","Returns the entire module as a string.","Returns an iterator over the predecessors for a given …","Returns an iterator over the successors for a given block.","Returns an iterator over <strong>all</strong> of the nodes in the CFG. This …","Returns the list of reachable blocks in a valid reverse …","Returns an iterator over the predecessors for a given …","Prints an entire module to <code>stdout</code>.","Returns an iterator over the reachable blocks in reverse …","Returns the root (entry) node of the CFG.","","","","","","Checks if <code>possible_dominator</code> strictly <code>block</code>. Both blocks …","Writes an entire module to a <code>String</code>.","Returns an iterator over the successors for a given block.","","","","","","","","","","","","","","","","","","Stringifies a SIR type. Unlike the rest of this module, …","","","","","","","","","Provides the name of a value. This is the <code>%_</code> syntax.","Models a type that can act as a key for the arena map …","This is meant to act as a primary mapping of <code>K -&gt; V</code>, where …","Helper type for <code>.into_iter()</code> for arena map types","The underlying data type of the key.","Provides a way of iterating over all of the keys in a …","Intended to be a dense secondary mapping <code>K -&gt; V</code> for keys …","Intended to be a dense representation for a set of keys …","Contains a table of immutable, unique elements. All …","","","","","","","","","","","","","Returns how big the map believes that the primary arena is.","Returns the total number of elements that the arena can …","Returns the total number of elements that the arena can …","Returns how many keys can be stored in the set without …","Returns the number of keys that are currently in the set.","Removes all keys from the set without deallocating the …","","","","","","","","","","","Checks if the map contains a value for a given key.","Checks if the arena contains a given key, i.e. whether a …","Checks if the arena contains a given key, i.e. whether a …","Returns whether or not a key is present in the set.","","","","","","","","","","","","","","","","","","Fills a <code>SecondaryMap</code> with a given value for every key. <code>upto</code>","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets a value out of the map if the key has been previously …","Accesses the arena and gets the value associated with a …","Accesses the arena and gets the value associated with a …","Gets a value out of the map if the key has been previously …","Accesses the arena and gets the value associated with a …","","","","","","","Inserts a key/value pair into the table, mapping …","Inserts a value that is either unique or a duplicate of …","Adds an item into the arena, and returns a key that can be …","Inserts a key into the set, returns whether the key was in …","Equivalent to <code>Self::insert</code> but will only make a copy of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Checks if the map has any values in it, i.e. if any …","Checks if the arena has had any elements pushed into it.","Checks if the arena has had any elements pushed into it.","Returns if the set is completely empty.","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Converts the internal storage type into a <code>usize</code> index.","Creates a new key from a given arena index. This should do …","Returns an iterator that iterates over the (valid) keys of …","Returns an iterator that iterates over the (valid) keys of …","Returns an iterator that iterates over the (valid) keys of …","Returns an iterator that iterates over the keys that are …","Returns the last element that was inserted in the map. Note","Returns the last element that was inserted in the map.","Returns the last element that was inserted in the map.","Returns the number of values that have been inserted into …","Gets the number of elements that have been pushed into the …","","Gets the number of elements that have been pushed into the …","Efficiently creates a <code>SecondaryMap</code> by applying a function …","Efficiently creates a <code>SecondarySet</code> by applying a function …","Efficiently creates a <code>SecondaryMap</code> by applying a function …","Creates an empty map with <code>0</code> as the capacity.","Creates a new arena with nothing in it.","Creates a new, empty arena. This creates the underlying <code>Vec</code>…","Creates an empty set with <code>0</code> as the capacity.","","","","","Gets the key that <em>will be</em> returned by <code>Self::insert</code> when it…","Gets the key that <em>will be</em> returned by <code>Self::insert</code> when it…","Removes a key from the table if it exists. Returns whether …","Removes a key from the set if it’s present, and returns …","Informs the map of how big the primary arena is.","Reserves capacity for at least <code>additional</code> more unique …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for exactly <code>additional</code> more …","Reserves the minimum capacity for exactly <code>additional</code> more …","","","","","Shrinks the underlying capacity of the arena as much as …","Shrinks the capacity of the arena as much as possible …","Shrinks the capacity of the arena as much as possible …","","","Removes a key from the table and returns the value that …","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Returns an iterator that iterates over the values in the …","Creates an empty map that is pre-allocated for a specific …","Creates the arena with a starting capacity.","Creates an empty arena with an initial capacity. This …","Creates an empty set that is pre-allocated for a specific …","Creates an empty map that is configured for optimal …","Creates an empty map that is configured for optimal …","Human-readable assembly that can be plugged into a …","Basic options that every CLI tool in the suite takes in.","A dense binary format that can be serialized and …","Option for omitting/leaving the frame pointer","Human-readable IR in a text file.","The format for a tool emitting SIR to emit in.","The format for a tool emitting native code to emit in.","Never omits the frame pointer","Raw object code that can be plugged into a linker","Omits the frame pointer in any function where it is …","","","","","","","","","","","","","Gets the baseline default options that every tool needs.","An emit argument for tools that emit machine-specific code.","Gets the emit format for a tool that emits SIR","","","","","Whether or not to omit the frame pointer","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Gets the input file specified on the CLI.","The list of inputs given to the tool","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the number of concurrent threads to use for a given …","Gets the output file specified on the CLI, if one exists.","The file to output results to","Gets a list of passes to run over the IR","","","Returns a <code>OptionParser</code> preconfigured with the standard …","Returns a <code>OptionParser</code> preconfigured with the standard …","","","","","","","","","","","","","Checks for the presence of <code>-v</code> or <code>--verbose</code>","Whether or not to run the logging in verbose mode.","Whether the user wants verify passes inserted between …","The 64-bit extension to arm, also known as <code>arm64</code>","64-bit arm Linux","Models the more complex layout information","A representation of a valid allocation for a MIR program.","The related architecture type that defines the architecture","Models the architecture-specific details that a backend …","64-bit arm Windows","64-bit arm macOS","Different types of assembly, if supported by the emitter. …","A representation of the specific available registers on a …","A generic backend using a specified emitter. The <code>Backend</code> …","Models the specific CPU architecture that is being …","Use-def information for a <code>call</code>-like instruction","Used by <code>StackFrame::register_use_def_call</code> and …","Models a calling convention.","A set of detailed codegen configuration options that are …","Models a simpler form of live-ness, live intervals.","The context passed to any code doing instruction selection","The type of function-associated data that this …","A test 3-register target that is identical to …","An emitter that can emit different formats from a given …","The different types of external entities that MIR can …","A list of “fixed” intervals.","The register class for floating-point values.","Context passed to instruction selection code that’s …","Associated data that a function uses, it can be in several …","Holds a <code>MIRFunction</code> along with the associated stack frame …","A function/procedure","The main instruction selection pipeline that takes in a …","A register allocator using the “iterated register …","Says that a variable is located in a register","The MIR instruction type used for the architecture","An instruction selector that lowers one <code>Inst</code> into …","The register class for integer values.","Demotion pass that moves any aggregates (arrays, …","A linear scanning based register allocator","A live interval denoting the instruction a register is …","Models the live range information necessary for the …","The “context” of a specific lowering.","A reference to a single block of MIR.","Defines a “block” in MIR. This is just a range that …","A reference to a piece of data inside a <code>MIRFunction</code>.","A single function in MIR.","Equivalent of a <code>Module</code> for MIR.","Defines the API for a machine instruction.","A reference to a value (and its associated storage)","An object of a specific type","Different types of object code output, if supported by the …","Represents a single physical register on a CPU. The …","A location used in parallel copy scheduling.","Models the idea of a “platform,” i.e. a target …","A set of pre-made backend pipelines for various …","Preset target configurations for specific architecture/ABI …","A single point in a MIR program.","A nice way to iterate over program points when desired.","A nice way to iterate over program points when desired.","A register that is either a virtual register or a physical …","Models the type of register that a given register is.","A collector that can have registers added to it.","An abstract representation of a <code>mov</code> between two registers","Models a register allocator that works over MIR.","Models mapping an instruction to the register allocation …","Says that a variable is located at an offset relative to …","Says that a variable is located at an offset relative to …","A reload, i.e. <code>to = *from</code>","Performs the final phase of codegen, rewriting …","A spill, i.e. a <code>*to = from</code>","Models a single spill or reload generated by the register …","Interface for a generic “stack frame” that a target …","A “register allocator” that puts everything on the …","Models the data-layout, calling conventions and other …","Supported CPU/OS targets. These are associated with their …","A reference to an anonymous temporary, necessary to break …","Models the layout of a given type. This is the size and …","An abstract representation of a <code>jmp</code> that will always be …","Represents a single <strong>virtual</strong> register. The register class …","The location of a single “variable.” This denotes …","A new-type for a register that is writeable. This doesn’…","The 64-bit extension to x86, also known as <code>amd64</code>.","64-bit x86 Linux","64-bit x86 Windows","64-bit x86 macOS","Checks if the instruction <code>merge</code> can be merged with <code>base</code> …","Adds a constant to the function, and returns a reference …","Adds an interval to a register’s set of fixed intervals.","The number of bytes that a given section of memory must be …","Returns the entire function as a linear list of …","Allows iterating over all the fixed intervals.","Computes a valid register allocation for the given “…","","","Returns <code>self</code> as a <code>RegToRegCopy</code> if <code>self</code> is a …","If <code>self</code> is a <code>PReg</code>, returns it.","Returns <code>self</code> as a <code>UnconditionalBranch</code> if <code>self</code> is an …","If <code>self</code> is a <code>VReg</code>, returns it.","Emits assembly in a format specified by the emitter, …","Emits assembly in a format specified by the emitter, …","Gets the associated value, no matter what state <code>self</code> is in.","Creates a <code>ProgramPoint</code> that points to the location before <code>i</code>…","This is specifically for lowering parameters and similar …","Begins creating a fixed interval for each register in <code>regs</code>.","Begins creating a fixed interval for each register in <code>regs</code>.","Called before we begin lowering a single <code>ir::Inst</code>. This …","Makes a live interval representing <code>(start, end)</code>.","Gets the sequence of instructions that make up a single …","Returns the list of MIR blocks in the function.","Returns the layout of a <code>bool</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the use-def information previously given to …","Gets what type of register this register is for.","Gets what type of register this register is for.","Gets the register class of the underlying register, …","All registers that are callee-clobbered (must be preserved …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes a precise set of live ranges for each v-reg (and …","Computes a conservative set of live intervals for each …","Enforce a constraint that <code>value</code>s result be placed in <code>reg</code>. …","Creates a target-specific copy instruction that copies a …","Returns the specific CPU architecture this is configured …","Returns the specific CPU architecture this is configured …","Returns all the individual pieces of data in a function.","Returns a <code>Target</code> that is configured for the 3-register …","","","","Returns an instance of the default calling convention for …","Creates an instance of the default stack frame object for …","Creates an interval that doesn’t have a beginning, i.e. …","Pushes every register being defined by <code>self</code> into <code>collector</code>.","","","","","","","Push an instruction into the result buffer.","This is specifically for lowering parameters and similar …","Finishes creating a fixed interval for <code>reg</code>.","Finishes creating a fixed interval for each register in …","Finalizes the process began by <code>Self::begin_linear_lowering</code>…","Returns whether or not <code>self</code> stops being live before <code>other</code> …","Returns whether or not <code>self</code> stops being live before <code>other</code> …","Returns whether or not <code>self</code> stops being live before <code>other</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the list of external symbols referenced in the module","Returns the layout of an <code>f32</code>","Returns the layout of an <code>f64</code>","The linear index of the instruction that defines this …","Gets the list of fixed intervals defined by the …","Creates a floating-point register with a given hardware …","Creates a floating-point register with a given hardware …","The list of floating-point registers defined by the call","","","","","","","","","","","","","","","","","","","","","","","","","","If <code>func</code>s calling convention is supported, returns a stack …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The source of the copy","Calculates the layout information for a given aggregate …","Creates a new <code>MIRBlockInterval</code>.","Creates a <code>Backend</code> from a MIR module.","Creates a new <code>Reg</code> from a physical register.","Converts a <code>Reg</code> into a <code>WriteableReg</code>. In doing so, the …","","Creates a new <code>Reg</code> from a virtual register.","Gets the current function being lowered.","Returns all the functions that are in the module, along …","Returns a mutable reference to all the functions in the …","Called during the final emitting phase, will emit a …","Called during the final emitting phase, will emit a …","","","","","","","","","","","","","","","","","","","A suggested set of “high priority” registers when a …","Gets the physical “number” of the register that …","Gets the physical “number” of the register that …","Returns the layout of an <code>i16</code>","Returns the layout of an <code>i32</code>","Returns the layout of an <code>i64</code>","Returns the layout of an <code>i8</code>","The “index” of the register. This is effectively the …","The “index” of the register. This is effectively the …","Gets the register that refers to the instruction pointer","Gets the register that refers to the instruction pointer","Creates an integer register with a given hardware number","Creates an integer register with a given hardware number","The list of integer registers defined by the call","Gets the live intervals for each register. These are not …","Gets the list of fixed intervals for <code>reg</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the instruction is a copy between two registers.","Checks if the instruction is a copy between two registers.","Checks if a given instruction has been merged with another …","Checks if the instruction is a copy from the same register …","Checks if the instruction is a copy from the same register …","Checks if <code>self</code> is a <code>PReg</code>","","","","","","Checks if the instruction is a return instruction","A “spill interval” is an interval of the form <code>(x, x)</code>. …","Checks if the instruction is an unconditional jump","Checks if the instruction is an unconditional jump","Checks if <code>self</code> is a <code>VReg</code>","","","","","","","","","","","","","","","","","If <code>reg</code>’s last use is a copy to another register, this …","The linear index of the instruction that last uses this …","Gets the <code>TypeLayout</code> associated with a given type.","Returns a <code>Target</code> that is configured for the x86-64 System …","Creates an instruction that loads <code>from</code> into <code>to</code>.","Lowers a single SIR instruction into <code>MachInst</code>s for the …","Performs instruction selection over a SIR <code>Module</code> and emits …","Lowers a call instruction, handling passing arguments …","Lowers an indirect call instruction, handling passing …","Emits a copy from the location of a function parameter …","Lowers a return instruction, handling moving values into …","Returns a <code>Target</code> that is configured for the x86-64 System …","For every instruction in the program, maps to a list of …","Gets the register mapping for the instruction after <code>pp</code>.","Marks that the instruction <code>merge</code> was merged with <code>base</code>. …","If a value has a constrained result register, returns …","Gets the metadata for the associated SIR function at the …","Finds the <code>MIRBlock</code> associated with a given <code>Block</code>.","The module being lowered. This is here to refer to …","Gets a reference to the name of the function. This can be …","Creates an instance of the selector with itself configured …","Creates an instance of the legalizer","Creates a “module” of MIR.","Gets a new calling convention for a given function","Creates a <code>LoweringContext</code> prepared for a specific target …","Gets a new stack frame for a given function","","Gets a new vreg for a given register class. This register …","Emits object code in a format specified by the emitter, …","Emits object code in a format specified by the emitter, …","Calculates the offset, in bytes, to get to the <code>member</code>-th …","Returns the index that the program point points to.","Whether to attempt to omit the frame pointer, if possible …","Gets the <code>CodegenOptions</code> that the code is being generated …","Codegen options, available for instruction selection code …","Checks whether the interval of program points represented …","Returns the amount of padding that directly follows the …","","","","","","","","","","","","","","","","","","","","This module defines SIR matchers that can be used inside …","Returns a list of all the accessible registers for the …","Returns a list of all the accessible registers for the …","Calculates all the type layouts for every type present in …","Prepares the <code>LoweringContext</code> to start having instructions …","All registers that are callee-preserved (must be preserved …","Used to inform a frame that a “callee-preserved” …","Returns the program order of the blocks, i.e. the order …","Returns the program order of the blocks, i.e. the order …","Returns an iterator that yields program points along with …","Returns an iterator that yields program points along with …","Gets the range of program points represented by the …","Returns the layout of a <code>ptr</code>","Marks that the module references <code>func</code> as an external, and …","Used to inform a frame of register use/def information for …","Returns a representation of the available registers for …","Gets the points that <code>reg</code> needs to be reloaded at","","","","","","Resolves (and possibly inserts) a string in the MIR module…","Gets a result register for a given value.","Returns the use-def information of a <code>ret</code> instruction","Rewrites an instruction to change all <code>Reg</code> references into …","Rewrites a MIR function according to the allocation given …","Rewrites the function with a new list of instructions (and …","","Given a list of block parameters and arguments being …","","","","","","","The number of contiguous bytes required to store a value …","Makes a live interval representing <code>(start, start)</code>.","“Spills” a register that is <code>bytes</code> bytes long, …","A list of spills/reloads along with the program point they …","The number of bytes that have been put on the stack at …","Informs the frame of a stack object that is being used. …","If <code>reg</code>’s live interval was started by a copy instruction,","Returns whether or not <code>self</code> starts being live after <code>other</code> …","Returns whether or not <code>self</code> starts being live before <code>other</code> …","Creates an instruction that stores <code>from</code> into <code>to</code>.","Gets all the symbols in the module","Gets the function-associated constant data that goes along …","Takes the current instruction buffer, emptying it in the …","Takes the small vector holding the points that <code>reg</code> needs …","The target that code is being generated for. This should …","The destination of the copy","The destination of the jump","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>WriteableReg</code> back a <code>Reg</code>. In doing so, the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Registers that are not able to be allocated, that register …","Pushes every register being used by <code>self</code> into <code>collector</code>.","<strong>All</strong> registers used, this is usually the list of parameters …","Gets the <code>RegClass</code> that a given <code>Value</code> can go in.","The width (in bytes) of the copy","Returns a <code>Target</code> that is configured for the x86-64 Windows …","Creates a <code>Rewriter</code> that will rewrite a function using …","Creates a register with a given number and class","Creates a register with a given number and class","x86-64 Backend","An “unoptimized” pipeline that doesn’t actually …","An ‘optimized’ pipeline preset for x86-64 with a given …","An “unoptimized” pipeline for x86-64 on the System V …","The physical register being spilled to the stack","The stack location being loaded from","The stack location to spill from","The physical register being reloaded into","A matcher that wraps up a matcher function.","A basic matcher for a single instruction, for use in …","Matches against <code>and</code> instructions, ignoring operands","Matching against <code>and</code> instructions and their operands","Matches any instruction, or anything else that produces a …","Matches against <code>ashr</code> instructions, ignoring operands","Matching against <code>ashr</code> instructions and their operands","","","","","Matches against <code>fadd</code> instructions, ignoring operands","Matching against <code>fadd</code> instructions and their operands","Matches against <code>fdiv</code> instructions, ignoring operands","Matching against <code>fdiv</code> instructions and their operands","Matches against <code>fmul</code> instructions, ignoring operands","Matching against <code>fmul</code> instructions and their operands","Matches against <code>frem</code> instructions, ignoring operands","Matching against <code>frem</code> instructions and their operands","Returns the argument unchanged.","Matches against <code>fsub</code> instructions, ignoring operands","Matching against <code>fsub</code> instructions and their operands","Matches against <code>iadd</code> instructions, ignoring operands","Matching against <code>iadd</code> instructions and their operands","Matches on any <code>icmp</code> instruction without matching on any of …","Matches on an <code>icmp</code> instruction with a specific condition, …","Matches any <code>iconst</code> instruction.","Matches on an <code>iconst</code> instruction, and sets <code>val</code> to the …","Matches any <code>iconst</code> instruction with any value.","Matches any <code>iconst</code> instruction that has a value that can …","Matches against <code>imul</code> instructions, ignoring operands","Matching against <code>imul</code> instructions and their operands","Calls <code>U::from(self)</code>.","Matches against <code>isub</code> instructions, ignoring operands","Matching against <code>isub</code> instructions and their operands","Matches any <code>load</code> instruction.","Matches against <code>lshr</code> instructions, ignoring operands","Matching against <code>lshr</code> instructions and their operands","Once <code>Self::matches_as_base</code> has been called and returns <code>true</code>…","","Once <code>Self::matches_as_operand</code> has been called and returns …","","Used when you want to actually perform the merge between …","Used when you want to actually perform the merge onto <code>base</code> …","Used when you want to check if a merge between <code>base</code> and …","Runs the matcher against an instruction, the instruction …","","Runs the matcher against <code>val</code>, the instruction as treated …","","Used when you want to check if a merge between <code>base</code> and …","Performs the two-step “check if able to merge” and “…","Performs the two-step “check if able to merge” and “…","Matches an integral constant of <code>-1</code> for any integer type","Matches against <code>or</code> instructions, ignoring operands","Matching against <code>or</code> instructions and their operands","Matches any block parameter (aka phi nodes).","Matches against <code>sdiv</code> instructions, ignoring operands","Matching against <code>sdiv</code> instructions and their operands","Matches against <code>shl</code> instructions, ignoring operands","Matching against <code>shl</code> instructions and their operands","Matches against <code>srem</code> instructions, ignoring operands","Matching against <code>srem</code> instructions and their operands","","","","","Matches against <code>udiv</code> instructions, ignoring operands","Matching against <code>udiv</code> instructions and their operands","Matches against <code>urem</code> instructions, ignoring operands","Matching against <code>urem</code> instructions and their operands","Matches against <code>xor</code> instructions, ignoring operands","Matching against <code>xor</code> instructions and their operands","Matches any instruction that yields a constant <code>0</code> value","Jump if greater than (unsigned)","Jump if greater than or equal to (unsigned)","An ALU instruction with a given opcode that operates on …","An ALU instruction with a given opcode that operates on …","The opcode of A specific ALU instruction","Two’s complement <code>add</code> instruction","Floating-point addition","Bitwise <code>and</code> instruction","An array of constants with a specified relative order","Jump if less than (unsigned)","Jump if less than or equal to (unsigned)","A <code>.byte</code> (1-byte) constant","A single byte","Calls a known function","Calls a known function","Copies the sign bit of the 32-bit source (always <code>eax</code>) into …","Broadcasts the sign bit of <code>eax</code> into <code>edx</code>","A <code>cmp</code> instruction. Subtracts two values, discards the …","A comparison between two integers","A condition code, used by several instructions to do …","A single, self-contained constant for x86-64.","Copies the sign bit of the 64-bit source (always <code>rax</code>) into …","Broadcasts the sign bit of <code>rax</code> into <code>rdx</code>","Copies the sign bit of the 16-bit source (always <code>ax</code>) into …","Broadcasts the sign bit of <code>ax</code> into <code>dx</code>","The register where the upper sign-extension bits go","The register where the upper sign-extension bits go","The register where the upper sign-extension bits go","The register where the high bits of the dividend must be …","The register where the high bits of the dividend must be …","The register where the low bits of the dividend must be …","The register where the low bits of the dividend must be …","<strong>NOT INTENDED FOR PRODUCTION USE</strong>.","A debug stack frame setup that only makes 3 registers …","Performs unsigned integer division. The following …","Floating-point division","Performs unsigned division","A double word, i.e. 4 bytes","Jump if equal","The ELF object format","<code>x*8</code>","The x86-64 emitter. This delegates to more specialized …","An ALU instruction with a given opcode that operates on …","Floating-point arithmetic instruction","The opcode of a specific ALU(like) instruction that …","<code>x*4</code>","Information about the stack frame of a function","Jump if greater than (signed)","Jump if greater than or equal to (signed)","Output compatible with GNU <code>as</code>","Output compatible with GNU <code>as</code>, but in Intel syntax","A global entity, e.g. a function","An instruction selector for x86-64.","Performs signed integer division. The following …","Performs signed division","Multiplies two integers and gets a 128bit result","A multiplication that produces a 128-bit result","A signed immediate value, i.e. <code>$imm</code> in x86-64 assembly","A memory location to be loaded from","An operand to an instruction that references a memory …","Performs an indirect call to a register, function pointer …","Performs an indirect call","Models a single machine instruction for the x86_64 backend.","Possibly jumps to a block or target","A jump to a local location in the function","A target that a <code>jmp</code> instruction could target","Jump if less than (signed)","Jump if less than or equal to (signed)","A <code>lea</code> that computes an address, and then puts it into <code>dest</code>","An <code>lea</code> instruction that computes an address","A platform representing (typical) Linux-based operating …","A local entity, usually a block label","A <code>.long</code> (4-byte) constant","Output compatible with MASM","2^(30 - 1) - 1`, the maximum value that can be stored as …","<code>-2^(30 - 1)</code>, the minimum value that can be stored as an …","A platform representing the (x86-64 variation of) the …","The Mach-O object format","A memory location to be loaded from","A memory location to be loaded from","A <code>mov</code> into a register","A <code>mov</code> into a register","Copies a value from memory into a floating-point register.","Loads a floating-point value from memory","Copies a floating-point value into memory.","Stores a floating-point value into memory","A <code>mov</code> that stores into memory","A <code>mov</code> that stores into memory","Copies a 64-bit value into a register","Moves a 64-bit constant into a register","Copies between floating-point registers, works on <code>f32</code>, <code>f64</code> …","Moves floating-point values between registers","Sign-extending copy instruction between two locations","A <code>movsx</code> that performs sign-extension","Zero-extending copy instruction between two locations","A <code>movzx</code> that performs zero-extension","Floating-point multiplication","Output compatible with NASM","Jump if not equal","Jump if not overflowed","Jump if positive","Jump if not zero (equivalent to JNE, but we want different …","Negates the (signed) value in a register","Negates the (signed) value in a register","A <code>nop</code> instruction with a specified byte length","A no-op instruction","Performs bitwise NOT on a register","Performs bitwise NOT on a register","Jump if overflowed","<code>x*1</code>","Bitwise <code>or</code> instruction","The PE object format","A bitwise OR between SIMD/floating-point registers","Floating-point bitwise XOR","Pops a value from the stack and writes it to <code>dest</code>","Pops a value from the stack and writes it to <code>dest</code>","Pushes the value of a register onto the stack","Pushes the value of a register onto the stack","The register where the quotient will be put","The register where the quotient will be put","A <code>.quad</code> (8-byte) constant","A <code>.quad</code> that refers to a label","A quad word, i.e. 8 bytes","A <code>PReg</code> referring to <code>r10</code>","A <code>PReg</code> referring to <code>r11</code>","A <code>PReg</code> referring to <code>r12</code>","A <code>PReg</code> referring to <code>r13</code>","A <code>PReg</code> referring to <code>r14</code>","A <code>PReg</code> referring to <code>r15</code>","A <code>PReg</code> referring to <code>r8</code>","A <code>PReg</code> referring to <code>r9</code>","A <code>PReg</code> referring to <code>rax</code>","A <code>PReg</code> referring to <code>rbp</code>","A <code>PReg</code> referring to <code>rbx</code>","A <code>PReg</code> referring to <code>rcx</code>","A <code>PReg</code> referring to <code>rdi</code>","A <code>PReg</code> referring to <code>rdx</code>","The register where the remainder will be put","The register where the remainder will be put","A <code>PReg</code> referring to <code>rip</code>","A <code>PReg</code> referring to <code>rsi</code>","A <code>PReg</code> referring to <code>rsp</code>","Loading from a pointer stored in a register, i.e. <code>[reg]</code>","Using a register’s value directly, i.e. <code>reg</code> in x86-64 …","Using a register’s value directly, i.e. <code>reg</code> in x86-64 …","Using a register’s value directly, i.e. <code>reg</code> in x86-64 …","The possible operands for instructions that can deal with …","The possible operands for instructions that can deal with …","The possible operands for instructions that can deal with …","Adding a constant offset to a register and loading, i.e. …","Adding an offset in reg2 to a base in reg1 and loading, …","Adds a register to another register that’s scaled, i.e. …","Adds a register to another register that’s scaled, and …","Returns from the current function","Returns from the function","This is the <code>[rip + global]</code> addressing mode for accessing a …","This is the <code>[rip + label]</code> addressing mode for accessing a …","This is the <code>[rip + label]</code> addressing mode for accessing a …","Jump if negative","The register being “sign-extended” into <code>DEST</code>","The register being “sign-extended” into <code>DEST</code>","The register being “sign-extended” into <code>DEST</code>","Arithmetic right shift instruction","The possible scalar (multiply) values for indirect …","This type is a compact representation of a <code>(Scale, i32)</code> …","Scales a register by a scalar and then uses that, i.e. …","A <code>setCC</code> instruction, used to set a byte based on a …","Sets a byte based on a condition","Logical left shift instruction","A <code>.short</code> (2-byte) constant","Logical right shift instruction","An offset from <code>rsp</code>. The storage is (offset, lo of …","A string constant that is <strong>not</strong> null-terminated by default","Two’s complement <code>sub</code> instruction","Floating-point subtraction","Models the System-V calling convention","An implementation of <code>StackFrame</code> for the System-V ABI.","A <code>test</code> instruction. Performs bitwise AND between two …","A different comparison between two integers","<code>x*2</code>","An undefined instruction that generates a trap when …","An undefined instruction that generates a trap when …","The size of an operand. For <code>Reg</code>s, this is the specific …","Extremely compact way of storing the width (in bytes) of …","An implementation of <code>CallingConv</code> for the Windows x64 ABI.","An implementation of <code>StackFrame</code> for the Windows x64 ABI.","A platform representing the (x86-64 variation of) the …","A word, i.e. 2 bytes","A target for a generic x86_64 CPU.","Different assembly formats for x86-64","Different object file formats for x86-64","An xmmword, i.e. 16 bytes","Bitwise <code>xor</code> instruction","Jump if zero (equivalent to JE, but we want different …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The desired length in bytes of the <code>nop</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The condition to set the byte based on","The condition of the jump. If this is <code>None</code> this is …","","","","","","","","","","","","","The destination register to copy to","The destination register to copy to","The destination location in memory","The destination of the zero-extend","The destination of the sign-extend","The destination of the sign-extend","The destination register to copy to","The destination register to copy to","The destination in memory to copy to","The register to write to (assumed to be the bottom byte of …","The destination for the top value of the stack","Gets the width of the destination in bytes","Gets the width of the destination in bytes","Gets the source size as an <code>Width</code>","The value being divided by.","The value being divided by.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the data held inside in an expanded form","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The floating-point format being used","The floating-point format being used","The floating-point format of the operation","The floating-point format of the operation","Formats the “canonical” assembly form of an x86-64 …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>WidthPair</code> with two widths, both in bits. …","Creates a new <code>WidthPair</code> with two widths, both in bytes. …","Creates an <code>Width</code> from a size in bytes","","","Creates a new <code>WidthPair</code> from two <code>Width</code> objects","The name of the function to call","Where the function pointer is located","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An ID that can be used to access use-def info from the …","An ID that can be used to access use-def info from the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts back into a raw byte count","","","Register where the first operand is located. This is also …","The left-hand side, also the destination of the low bits","Register where the first operand is located. This is also …","Register where the first operand is located. This is also …","First operand","First operand","","","","","","","","","","","","","","","","","Creates a compact representation. <code>offset</code> must be within …","","Gets the offset back out of the representation through a …","The operation being performed","The operation being performed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The register to NOT","The register to negate","","","","","","","","","","","Second operand","The right-hand operand","Second operand, another floating-point register","Second operand, either another floating-point register or …","Second operand","Second operand","Gets the scale back out of the representation","","","","The value being stored into memory","The value being stored into memory","The value being stored into memory","The source of the zero-extend","The source of the sign-extend","The register being copied from","The memory location being copied from","The register being stored into memory","Gets the width of the source in bits","Gets the width of the source in bytes","Gets the source size as an <code>Width</code>","Properly creates a <code>Self::StackOffset</code>.","","","","","","","","The target of the jumphe value to move into a register","The register to push","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of the operand and the destination","The size of the operand and the destination","A width for the operands","The size of the value being NOT-ed","The size of the value being NEG-ed","The size of the values being multiplied","The width of the division","The width of the division","A width for the two operands","A width for the two operands","The width of the push","The width of the pop","A pair of widths for the source and destinations","A pair of widths for the source and destinations","Creates a new debug stack frame that wraps <code>frame</code>]","Gets a <code>PReg</code> referring to the <code>n</code>th <code>xmmN</code> floating-point …","<code>ashr T %a, %b</code>, performs bitwise arithmetic right-shift","Pointing at the end of a specific block.","<code>alloca T</code>, performs stack allocation","Models an <code>alloca</code> stack allocation","<code>and T %a, %b</code>, performs bitwise AND","Helper type that appends to a function. Implements the …","Models a general arithmetic instruction that isn’t …","Models a general arithmetic instruction","Models an array type in the IR. Internally, contains a …","A <code>[T; N]</code> in the IR.","Pointing at a specific instruction in a given block.","<code>bconst N</code>, materializes a bool constant","Models a <code>bconst</code> instruction.","<code>btoi T, U %b</code>, converts a <code>bool</code> into an integer","Models a single basic block in a function within the IR.","Pointing “before” the first instruction in a given …","Some instructions model binary operations, those …","References a single basic block in the program.","Allows the blocks in a layout to be iterated over in …","Models a branch target, along with any arguments being …","Models a boolean type in the IR.","A <code>bool</code> in the IR.","<code>br block</code>, models an unconditional branch","Models a <code>br</code> instruction","The default C convention for the given target platform.","<code>call T @function(args...)</code>, models a direct call to a known …","Models which calling convention a given function should be …","Models a direct function call to a known function","Models a generalized cast instruction","Models a general arithmetic instruction that is …","<code>condbr bool %cond, if block1, else block2</code>, models a …","Models a conditional branch","Models basic cursor operations that <strong>view</strong> a function. None …","A cursor with additional methods for mutating the IR.","Models the position that the cursor is “pointing at.”","Owns all of the instructions, basic blocks, values, and …","Holds the “debug info” for an instruction, i.e. where …","Models <code>f64</code>, an IEEE double-precision float (<code>binary64</code>).","<code>eq</code>, checks if the integers are (bitwise) equivalent","<code>elemptr T, ptr %p, N</code>, gets a pointer into an aggregate","Models getting a pointer to the field of an aggregate","<code>extract T %s, N</code>, extracts a value from an aggregate","Models extracting a field from an aggregate","<code>fadd T %a, %b</code>, performs floating-point addition","<code>fcmp op T %a, %b</code>, models a floating-point comparison","Models an <code>fcmp</code> instruction.","Models the different ways that floating-point values can be","<code>fconst T N</code>, materializes a floating-point constant","Models an <code>fconst</code> instruction.","<code>fadd T %a, %b</code>, performs floating-point division","<code>fext T, U %b</code>, converts a float into a larger float","<code>fadd T %a, %b</code>, performs floating-point multiplication","<code>fneg T %a</code>, performs floating-point negation","<code>fadd T %a, %b</code>, gets the remainder of performing …","<code>fadd T %a, %b</code>, performs floating-point subtraction","<code>ftosi T, U %b</code>, converts a float into a signed integer","<code>ftoui T, U %b</code>, converts a float into an unsigned integer","<code>ftrunc T, U %b</code>, converts a float into a smaller float","Models the <code>fN</code> class of fundamental types.","An <code>fN</code> in the IR.","Maps the hardware representation of the floating-point …","Models any unary floating-point arithmetic instructions …","The reference type for a <code>Function</code>. These can be looked up …","Helper type for building a SIR function.","Similar to <code>FuncBuilder</code> but for in-place modification of …","Effectively a <code>FuncCursor</code> without any of the operations …","Models a single function in the IR.","Trait that allows configurable visiting of a single …","The definition of a function.","Models metadata about the function necessary for later …","A trait for a generic “visit an instruction” type. …","<code>globaladdr @name</code>, materializes a pointer to a global value","Models a <code>globaladdr</code> instruction.","<code>iadd T %a, %b</code>, performs two’s complement addition","<code>icmp op T %a, %b</code>, models an integer comparison","Models a single <code>icmp</code> instruction.","Models the different ways that integers values can be …","<code>iconst T N</code>, materializes an integer constant","Models an <code>iconst</code> instruction.","<code>imul T %a, %b</code>, performs two’s complement multiplication","<code>isub T %a, %b</code>, performs two’s complement subtraction","<code>itob T, U %b</code>, converts an integer into a <code>bool</code>","<code>itop T, U %b</code>, converts an integer into a pointer","<code>call T %var(args...)</code>, models an indirect call through a …","Models an indirect call to a function stored in a pointer.","<code>insert T %s, U %a, N</code>, inserts a value into an aggregate","A builder that inserts an instruction between/before other …","Models setting a field in an aggregate","While <code>Value</code>s refer to a result of some sort, <code>Inst</code>s refer to","The value is the result yielded by an instruction","Helper trait that allows easy creation of instruction …","This holds both the opcode of a given instruction and all …","Allows all of the instructions in a given block to be …","These are the properties that any transform or analysis …","Models the <code>iN</code> class of fundamental types.","An <code>iN</code> in the IR.","<code>lshr T %a, %b</code>, performs bitwise logical right-shift","Models the layout of an entire function and every …","<code>load T, ptr %p</code>, loads from a pointer","Models extracting a field from an aggregate","Contains all the data necessary for a single module of SIR.","Models shared ownership of the state that is shared …","Used to identify different <code>Module</code> instances efficiently.","<code>ne</code>, checks if the integers are (bitwise) not-equal","<code>noalias</code>: Only applicable to pointers. Asserts that a …","<code>noalias</code>: Only applicable to pointers. Asserts that a …","No parameter attributes","No return value attributes","<code>nonnull</code>: simply asserts that the pointer is not <code>null</code>.","<code>nonnull</code>: simply asserts that the pointer is not <code>null</code>.","No value.","Pointing at nothing.","<code>null T N</code>, materializes a null value","Models a <code>null</code> instruction.","<code>oeq</code>, “ordered and equal.” Checks if the operands are …","<code>oge</code>, “ordered and greater-than-or-equals.” Checks if …","<code>ogt</code>, “ordered and greater-than.” Checks if both …","<code>ole</code>, “ordered and less-than-or-equals.” Checks if both …","<code>olt</code>, “ordered and less-than.” Checks if both operands …","<code>one</code>, “ordered and not equal.” Checks if the operands …","<code>ord</code>, “ordered.” Checks that both operands are not <code>NaN</code>s.","<code>offset T, ptr %p</code>, performs pointer arithmetic","Models an <code>offset</code> instruction","<code>or T %a, %b</code>, performs bitwise OR","<code>ptoi T, U %b</code>, converts a pointer into an integer","The value is the nth block parameter of a block","Models the different attributes that can be on a given …","A parameter with an optional list of attributes","Models a pointer type in the IR.","A <code>ptr</code> in the IR.","A builder that replaces an instruction with a new one","<code>ret T %val</code>, returns from the current function","Denotes possible attributes that can be applied to the …","Models a return from a function","A return type with an optional list of attributes","<code>sdiv T %a, %b</code>, performs signed division","<code>sge</code>, treats both integers as signed and checks if <code>a &gt;= b</code>","<code>sgt</code>, treats both integers as signed and checks if <code>a &gt; b</code>","Trait that allows configurable and simple SIR visiting.","<code>sitof T, U %b</code>, converts a signed integer into a float","<code>sle</code>, treats both integers as signed and checks if <code>a &lt;= b</code>","<code>slt</code>, treats both integers as signed and checks if <code>a &lt; b</code>","<code>srem T %a, %b</code>, gets the remainder of performing signed …","<code>sel bool %cond, T %a, T %b</code>, models a ternary-like …","Models a <code>sel</code> instruction.","<code>sext T, U %b</code>, performs sign-extension","<code>shl T %a, %b</code>, performs bitwise left-shift","The reference type for <code>Signature</code>s. They are keys into a …","Helper type for building a <code>Signature</code>.","Holds all of the information necessary to call a function.","Models <code>f32</code>, an IEEE single-precision float (<code>binary32</code>).","Some value of type <code>T</code>.","A reference to a single slot on a function’s …","<code>stackslot $name</code>, materializes a pointer to stack memory","Contains information about a specific stack slot in a …","Models a <code>stackslot</code> instruction.","<code>store T %a, ptr %p</code>, stores a value to a pointer","Models a <code>store</code> instruction","Models a structure type in the IR. Internally, contains a …","A <code>{ T... }</code> in the IR.","System-V (only valid when targeting x86-64)","Models a terminator, i.e. the only instructions that are …","<code>trunc T, U %b</code>, performs truncation","A reference to a type. Copyable, compact, lightweight, and …","Manages all of the compound types for a given module of IR.","<code>udiv T %a, %b</code>, performs unsigned division","<code>ueq</code>, “unordered and equal.” Checks if the operands are …","<code>uge</code>, treats both integers as unsigned and checks if <code>a &gt;= b</code>","<code>uge</code>, “unordered and greater-than-or-equals.” Checks if …","<code>ugt</code>, treats both integers as unsigned and checks if <code>a &gt; b</code>","<code>ugt</code>, “unordered and greater-than.” Checks if both …","<code>itob T, U %b</code>, converts an unsigned integer into a float","<code>ule</code>, treats both integers as unsigned and checks if <code>a &lt;= b</code>","<code>ule</code>, “unordered and less-than-or-equals.” Checks if …","<code>ult</code>, treats both integers as unsigned and checks if <code>a &lt; b</code>","<code>olt</code>, “unordered and less-than.” Checks if both …","<code>une</code>, “unordered and not equal.” Checks if the operands …","<code>uno</code>, “unordered.” Checks if either operand is a <code>NaN</code>.","<code>urem T %a, %b</code>, gets the remainder of performing unsigned …","An unpacked representation of a <code>Type</code> that takes up twice as","Some instructions model unary operations, those …","<code>undef T N</code>, materializes an uninitialized value","Models an <code>undef</code> instruction.","<code>unreachable</code>, a terminator that can never be executed","Gets an <code>unreachable</code> instruction","A basic reference to some value, either the result of some …","Models where a given value came from.","Windows x64 (only valid when targeting x86-64)","<code>xor T %a, %b</code>, performs bitwise XOR","<code>zext T, U %b</code>, performs zero-extension","","","","","Marks the function as having a specified ABI.","Gets the value being extracted from","Gets the aggregate being inserted to","Gets the type being pointed to by <code>Self::base</code>","Iterates over every blocks","Returns a <code>SecondarySet</code> that contains every value with …","Returns the type being allocated on the stack","Builds an <code>alloca</code> instruction","Builds an <code>alloca</code> instruction","Builds an <code>and</code> instruction","Builds an <code>and</code> instruction","Returns a builder that can be used to append an …","Appends a block to the layout, putting it at the end of …","Adds a single block parameter of <code>ty</code> to <code>block</code> and returns a …","Appends a block parameter to a given block.","Appends all the block parameters necessary for the …","Appends an instruction to the end of the specified block. …","Gets the block arguments being passed, if any","Gets the arguments being passed into the function","Gets the arguments being passed to the call","Creates an array type, and returns a <code>Type</code> that refers to …","Creates an array type on the given context and returns it.","If <code>self</code> models an array type, unwraps the array type and …","If <code>self</code> models a boolean type, unwraps the boolean type …","If <code>self</code> models a float type, unwraps the float type and …","If <code>self</code> models a integer type, unwraps the integer type …","If <code>self</code> models a pointer type, unwraps the pointer type …","If <code>self</code> models a struct type, unwraps the struct type and …","Builds an <code>ashr</code> instruction","Builds an <code>ashr</code> instruction","Gets the base of the new address","Returns the pointer to the aggregate being indexed into","Builds a <code>bconst</code> instruction","Builds a <code>bconst</code> instruction","","","","","","","","","Resolves a block into a full <code>BasicBlock</code>.","Gets the block target by itself.","Gets the first instruction in <code>block</code>","Gets the last instruction in <code>block</code>","Gets the name of a block that has been inserted into the …","Gets the name of a block that has been inserted into the …","Gets the name of a block that has been inserted into the …","Gets the block that comes after <code>block</code>","Gets the block parameters of a given block.","Gets the block parameters of a given block.","Gets the block parameters of a given block.","Gets the block that comes before <code>block</code>","Gets an iterator over the blocks of the layout.","Creates a boolean type (the <code>bool</code> type in the IR).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a <code>br</code> instruction","Builds a <code>br</code> instruction","If the instruction given is a branch instruction, returns …","If the instruction given is a branch instruction, returns …","If an instruction is a terminator, returns the list of …","Builds a <code>btoi</code> instruction","Builds a <code>btoi</code> instruction","“Builds” a single instruction and inserts it in …","Builds the signature","","","","Builds an instruction and returns the instruction","Builds an instruction and returns the instruction","Builds an instruction and returns its result.","Builds an instruction and returns its result.","Marks this parameter as being a “by-value” struct …","If <code>self</code> includes <code>byval(n)</code>, returns what <code>n</code> is.","Builds a <code>call</code> instruction to a statically-known function.","Builds a <code>call</code> instruction to a statically-known function.","Gets the function being called","Gets the function pointer being called","Gets the function’s calling conventioneturns the column in the original file that the entity …","Computes the function’s metadata. If there isn’t a …","Builds a <code>condbr</code> instruction","Builds a <code>condbr</code> instruction","Gets the condition that determines which value is chosen.","Gets the condition being checked in the <code>condbr</code>","Gets the constant value as a u64 that can be manipulated …","Gets the <code>ModuleContext</code> owned by this module. This can be …","Creates a single basic block and returns it. This block is …","Creates a single basic block and returns it. This block is …","Creates a single basic block and returns it. This block is …","Inserts a basic block with a given name into the DFG. It …","Equivalent to <code>Self::create_block</code>, except it inserts the …","Equivalent to <code>Self::create_block</code>, except it inserts the …","Equivalent to <code>Self::create_block</code>, except it inserts the …","Equivalent to <code>Self::create_block</code>, except it inserts the …","Equivalent to <code>Self::create_block</code>, except it inserts the …","Equivalent to <code>Self::create_block</code>, except it inserts the …","Inserts an instruction into the DFG, and returns a …","Creates a single basic block and returns it. This block is …","Creates a new stack slot with a given name and type.","Gets the context associated with a given builder. This is …","Gets the module context associated with the module that …","Gets the current block being viewed by the cursor, if any.","Gets the current block being viewed by the cursor, if any.","Attempts to get the current block","Tries to get the terminator of the current block. If there …","Tries to get the terminator of the current block. If there …","Tries to get the possible branch targets for the …","Tries to get the possible branch targets for the …","Gets a <code>Func</code> referring to the function being built.","Gets the current block being viewed by the cursor, if any.","Gets the current block being viewed by the cursor, if any.","Gets the debuginfo associated with the current instruction","Gets the debuginfo associated with the current instruction","Gets the <code>Signature</code> of the function being built.","Gets the module being visited.","Gets a single value’s <code>DebugInfo</code>.","Declares a function without providing it a definition. It …","Returns the definition of the function being viewed","","","Gets a mutable reference to the function’s definition.","","","","","","","Finishes defining the function, and actually generates a …","Returns a <code>FuncBuilder</code> that will create a body for a …","Declares and then defines a new function.","Gets the function definition if it exists.","Gets the function definition if it exists.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the data-flow graph in use for the inserter","","Gets the data-flow graph associated with the function …","Gets the data-flow graph associated with the function …","","","Returns the data-flow graph for the function","The “data-flow graph” (DFG) of the function. This is …","Dispatcher that does the default walking behavior, going …","Dispatcher that does the default walking behavior, going …","Dispatcher that does the default walking behavior, going …","Dispatcher that does the default walking behavior, going …","Dispatcher that does the default walking behavior to every …","Dispatcher that does the default walking behavior to every …","Dispatcher that does the default behavior of calling the …","Dispatcher that does the default behavior of calling the …","Dispatcher that does the default behavior of calling the …","Dispatcher that does the default behavior of calling the …","Dispatcher that does the default behavior of visiting …","Dispatcher that does the default behavior of visiting …","Dispatcher that does the default behavior of iterating …","Dispatcher that does the default behavior of iterating …","Looks into the type context and returns the length of the …","Builds an <code>elemptr</code> instruction","Builds an <code>elemptr</code> instruction","Gets the entry block of the function. Unless no blocks …","Gets the entry block of the function. Unless no blocks …","Gets the entry block of the function. Unless no blocks …","Gets the entry block for the layout, if it exists.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds an <code>extract</code> instruction that extracts a value of a …","Builds an <code>extract</code> instruction that extracts a value of a …","Shorthand for <code>Type::float(FloatFormat::Single)</code>. Exactly …","Shorthand for <code>Type::float(FloatFormat::Double)</code>. Exactly …","Builds an <code>fadd</code> instruction","Builds an <code>fadd</code> instruction","Intentionally creates meaningless debuginfo, this must be …","Gets the branch being jumped to if the condition is <code>false</code>","Builds an <code>fcmp</code> instruction","Builds an <code>fcmp</code> instruction","Builds an <code>fconst</code> instruction","Builds an <code>fconst</code> instruction","Builds an <code>fconst</code> instruction","Builds an <code>fconst</code> instruction","Builds an <code>fdiv</code> instruction","Builds an <code>fdiv</code> instruction","Builds an <code>fext</code> instruction","Builds an <code>fext</code> instruction","A reference to the filename. This can be resolved into a …","Finds a block by its name, returning it if it’s inserted …","Finds a block by name, if it exists.","Finds a <code>Func</code> with a given name. If the function has not …","Finds a <code>Func</code> with a given name. If the function has not …","Creates a float type (the <code>fN</code> types in the IR), with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds an <code>fmul</code> instruction","Builds an <code>fmul</code> instruction","Builds an <code>fneg</code> instruction","Builds an <code>fneg</code> instruction","Gets the underlying IEEE floating-point type from a given …","Builds an <code>frem</code> instruction","Builds an <code>frem</code> instruction","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Same as <code>Self::new</code> but specifically when there’s a …","Builds an <code>fsub</code> instruction","Builds an <code>fsub</code> instruction","Builds an <code>ftosi</code> instruction","Builds an <code>ftosi</code> instruction","Builds an <code>ftoui</code> instruction","Builds an <code>ftoui</code> instruction","Builds an <code>fext</code> instruction","Builds an <code>fext</code> instruction","Gets a <code>Func</code> that refers to <code>self</code>. This can be used when a …","The function being moved over, public so it can be …","Gets a mutable reference to the function itself","","Resolves a <code>Func</code> into a real function object.","Resolves a <code>Func</code> into a real function object.","Resolves a <code>Func</code> into a real function object.","Resolves a <code>Func</code> into a real function object.","Returns an iterator over all of the functions in the …","Gets the value the instruction was created with","Builds a <code>globaladdr</code> instruction","Builds a <code>globaladdr</code> instruction","Moves the position to <code>After(block)</code>.","Moves the position to <code>After(block)</code>.","Moves the position to <code>Before(block)</code>.","Moves the position to <code>Before(block)</code>.","Moves the position to <code>At(block, first_inst_in_block)</code>.","Moves the position to <code>At(block, first_inst_in_block)</code>.","Moves the position to <code>Nothing</code>.","Moves the position to <code>Nothing</code>.","Moves the position to <code>At(containing, inst)</code>","Moves the position to <code>At(containing, inst)</code>","Moves the position to <code>At(block, last_inst_in_block)</code>.","Moves the position to <code>At(block, last_inst_in_block)</code>.","Whether the function contains an <code>alloca</code> instruction in any …","Checks if the instruction yields any results at all.","Checks if the instruction yields any results at all.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shorthand for creating an integer of width <code>16</code>. Exactly …","Shorthand for creating an integer of width <code>32</code>. Exactly …","Shorthand for creating an integer of width <code>64</code>. Exactly …","Shorthand for creating an integer of width <code>8</code>. Exactly …","Builds an <code>iadd</code> instruction","Builds an <code>iadd</code> instruction","Builds an <code>icmp</code> instruction","Builds an <code>icmp</code> instruction","Builds an <code>icmp eq</code> instruction","Builds an <code>icmp eq</code> instruction","Builds an <code>icmp ne</code> instruction","Builds an <code>icmp ne</code> instruction","Builds an <code>iconst</code> instruction","Builds an <code>iconst</code> instruction","Gets a <code>ModuleIdentity</code> that refers to the object.","Gets the value yielded if <code>Self::condition</code> is <code>false</code>.","Gets the value yielded if <code>Self::condition</code> is <code>true</code>.","Imports a signature into the function and returns a <code>Sig</code> …","Builds an <code>imul</code> instruction","Builds an <code>imul</code> instruction","Gets the index of the field being extracted","Gets the index of the field being inserted to","Gets the index of the field of <code>Self::base</code> the resulting …","Builds an <code>indirectcall</code> instruction to a statically-known …","Builds an <code>indirectcall</code> instruction to a statically-known …","Allows an instruction to be inserted before the current …","Allows an instruction to be inserted before the current …","Builds an <code>insert</code> instruction","Builds an <code>insert</code> instruction","Inserts a basic block after another basic block.","Inserts a block before another block in the list.","Inserts <code>inst</code> into the same block as <code>after</code>, but directly …","Inserts <code>inst</code> into the same block as <code>before</code>, but directly …","Inserts a function signature into the signature arena (if …","Convenience method for quickly inserting a string into the …","Gets the block that an instruction is defined in","Gets the block that an instruction is defined in","Gets the block that an instruction is in","Gets the data defining a given instruction","Gets the data defining a given instruction","Gets a single instruction’s <code>InstData</code>.","Returns the debug information for a given instruction","Returns the debug information for a given instruction","Gets a single instruction’s <code>DebugInfo</code>.","Gets the instruction that comes after <code>inst</code>","Gets the instruction that comes before <code>inst</code>","Converts an <code>Inst</code> into a <code>Value</code> that refers to the result of …","Converts an <code>Inst</code> into a <code>Value</code> that refers to the result of …","Converts an <code>Inst</code> into a <code>Value</code> that refers to the result of …","Converts an <code>Inst</code> into a <code>Value</code> referring to its result if …","Gets an iterator over every instruction in a given block.","Creates an integer type (the <code>iN</code> types in the IR) with a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if the type is a <code>Struct</code> or an <code>Array</code>.","Checks if the type is a <code>Array</code>.","Checks if the DFG contains a given block. If the block was …","Checks if a block is currently inside the layout","Checks if a given value is a block parameter.","Checks if the type is a <code>Bool</code>.","Checks if a type is a <code>bool</code> or an <code>iN</code>.","Checks whether the set of attributes includes <code>byval(n)</code>","Checks if the binary instruction follows the commutative …","","","","Checks if <code>self</code> is a constant materialization instruction. …","Checks if the function is a declaration, i.e. whether or …","Looks into the type context and checks if the array length …","Checks if a given block is the entry block to the function","Checks if a given block is the entry block to the function","Checks if a given block is the entry block to the function","Checks if the type is a <code>Float</code> with format …","Checks if the type is a <code>Float</code> with format …","Checks if the type is a <code>Float</code>.","Checks if the type is a <code>Float</code> and has a given format.","Checks if the integer type has a width of 16.","Checks if the type is an <code>Int</code> with a width of 16.","Checks if the integer type has a width of 32.","Checks if the type is an <code>Int</code> with a width of 32.","Checks if the integer type has a width of 64.","Checks if the type is an <code>Int</code> with a width of 64.","Checks if the integer type has a width of 8.","Checks if the type is an <code>Int</code> with a width of 8.","Checks if the DFG contains a given instruction. If it does …","Checks if an instruction is currently inside the layout","Checks if the type is a <code>Int</code>.","Checks if the type is a <code>Int</code> and has a given width.","Whether the function calls any other functions, directly or","Checks whether the set of attributes includes <code>noalias</code>","Checks whether the set of attributes includes <code>noalias</code>","Checks whether the set of attributes includes <code>noalias</code>","Checks whether the set of attributes includes <code>noalias</code>","Checks if the type is a <code>Ptr</code>.","","","","","","","","Checks if a given slot is actually a valid stack slot","Checks if the type is a <code>Struct</code>.","Checks if the DFG contains a given value. If it does not, …","Checks if the signature refers to a <code>void</code> function.","Checks if the load is <code>volatile</code>","Checks if the store is <code>volatile</code>","Builds an <code>isub</code> instruction","Builds an <code>isub</code> instruction","Builds an <code>itob</code> instruction","Builds an <code>itob</code> instruction","Builds an <code>itop</code> instruction","Builds an <code>itop</code> instruction","","","","","","","","","","","","","Gets the layout associated with the function being viewed","Gets the layout associated with the function being viewed","Returns the data-flow graph for the function","The layout of a function. This maps all the data in the …","Looks into the type context and returns the length of the …","Returns the number of blocks in the layout","Returns the number of instructions in the layout","Gets the left-hand operand of the instruction. For …","Gets the left-hand operand of the instruction. For …","Returns the line in the original file that the entity came …","Builds a non-volatile <code>load</code> instruction","Builds a non-volatile <code>load</code> instruction","Builds a volatile <code>load</code> instruction","Builds a volatile <code>load</code> instruction","Compares two instructions that are from the same block, …","Builds a <code>lshr</code> instruction","Builds a <code>lshr</code> instruction","Gets the mask used to mask the value","Returns a mask with every usable bit in the type set. This …","Defines APIs for pattern-matching on SIR.","Looks into the type context and gets the fields of the …","Gets the module being visited.","Gets the name of the block.","Gets the name of the stack slot","A reference to a name in the IR for a value. If this is …","Gets the name of the function without <code>@</code>.","Gets the name of the symbol being referenced","Gets a <code>Str</code> referring to the module’s name","Creates a <code>SigBuilder</code> for the signature <code>void ()</code>","Creates a new data-flow graph for a new function.","Creates a new <code>DebugInfo</code> object that has all the fields …","Creates an empty function with a given name and signature.","Creates a branch target that includes an optional list of …","Creates a new, empty layout that is linked to the given …","Creates a new, empty module with a given name.","Constructs a new, empty <code>TypePool</code>.","","","Moves the cursor to the next block in the function. If the …","Moves the cursor to the next block in the function. If the …","Moves the cursor to the next instruction in the function. …","Moves the cursor to the next instruction in the function. …","Gets one past the highest possible value key. This is an …","Builds a <code>null</code> instruction","Builds a <code>null</code> instruction","Builds an <code>offset</code> instruction","Builds an <code>offset</code> instruction","Gets the offset being applied to <code>Self::base</code>","Gets the type being pointed to by <code>Self::base</code>. This affects …","Gets the comparison that the <code>icmp</code> is performing between …","Gets the comparison the <code>fcmp</code> is performing between the two …","Gets the discriminant of the <code>InstData</code>, this is the “…","Gets the single unary operand of the instruction. For …","Gets the single unary operand of the instruction. For …","Gets any operands that the instruction operates on.","Gets any values that are used as operands for computing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds an <code>or</code> instruction","Builds an <code>or</code> instruction","Creates a <code>FuncView</code> that allows the given function to be …","Creates a <code>FuncCursor</code> that allows the given function to be …","Re-packs a <code>UType</code> into a <code>Type</code>. This is the inverse of …","Appends a parameter to the signature","Adds a param with an attribute list to the signature","Appends a list of parameters to the signature","Gets the parameters of the block.","Gets the list of parameters and their associated …","Appends a list of parameters (all with attributes) to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the pointer being loaded","Gets the pointer being written to","Gets the current cursor position","","","Moves the cursor to the block before the current one. If …","Moves the cursor to the block before the current one. If …","Moves the cursor to the previous instruction in the …","Moves the cursor to the previous instruction in the …","Builds a <code>ptoi</code> instruction","Builds a <code>ptoi</code> instruction","Creates a pointer type (the <code>ptr</code> type in the IR).","Removes the current block, and moves to the next one.","Removes the current block, and moves to the next one.","Removes a basic block that already exists.","Removes a block parameter from a given block.","Removes a block parameter from a given block.","Removes a block parameter from a given block without …","Removes the current instruction and leaves the cursor …","Removes the current instruction and leaves the cursor …","Removes an instruction from the layout. It is expected …","Removes the current instruction and leaves the cursor …","Removes the current instruction and leaves the cursor …","In the case that removing an instruction that is possibly …","Removes a single stack slot.","Removes a single stack slot.","Removes a stack slot that already exists.","Returns an instruction builder that replaces the current …","Returns an instruction builder that replaces the current …","Rewrites a branch to <code>target</code> to have <code>new</code> as the <code>index</code>th …","Rewrites a branch to <code>target</code> to have <code>new</code> as the <code>index</code>th …","Replaces a single argument to a branch target on a branch …","Replaces <code>inst</code> with new data and new debuginfo. This makes …","Replaces any uses of <code>original</code> in the function with <code>new</code>.","Replaces any uses of <code>original</code> in the function with <code>new</code>.","Replaces every use of <code>original</code> with <code>new</code>.","","","","","","","","Yields the “result” of the visit, if any exists.","Gets the type of the instruction’s result after it has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Marks the signature as having a given return type.","Builds a <code>ret</code> instruction that possibly returns a value and …","Builds a <code>ret</code> instruction that possibly returns a value and …","Shorthand for <code>Self::ret</code> with a <code>Some</code>.","Shorthand for <code>Self::ret</code> with a <code>Some</code>.","Shorthand for <code>Self::ret</code> with a <code>None</code>.","Shorthand for <code>Self::ret</code> with a <code>None</code>.","Adds an attribute to the return value of the function","Gets the list of attributes on the return value of the …","Gets everything related to the return value.","Gets the return type of the function signature.","Gets the return type of the function. If the function is a …","Rewrites the arguments of a given branch to match <code>new</code>","Rewrites the arguments of a given branch to match <code>new</code>","Rewrites a branch instruction that targets <code>target</code> to have …","Rewrites the branch at the end of the current block that …","Rewrites the branch at the end of the current block that …","Rewrites a branch that targets <code>to</code> to instead branch to <code>new</code> …","Consumes <code>self</code>, and replaces the block being targeted with …","Gets the left-hand operand of the instruction. For …","Gets the left-hand operand of the instruction. For …","Builds an <code>sdiv</code> instruction","Builds an <code>sdiv</code> instruction","Builds a <code>sel</code> instruction","Builds a <code>sel</code> instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the current cursor position","","","Builds a <code>sext</code> instruction","Builds a <code>sext</code> instruction","Builds a <code>shl</code> instruction","Builds a <code>shl</code> instruction","Gets the function signature","Gets the function signature","Returns a mask with the sign bit (MSB in 2’s complement) …","Resolves a <code>Sig</code> into a real signature. This signature must …","Gets a function’s <code>Signature</code> from a given <code>Sig</code>. Any <code>Sig</code> …","Gets the signature of the function.","Builds a <code>sitof</code> instruction","Builds a <code>sitof</code> instruction","Gets the name of the symbol being referenced","Builds an <code>srem</code> instruction","Builds an <code>srem</code> instruction","Returns the information about a given stack slot","Returns the information about a given stack slot","Gets the information about a particular stack slot","Provides an iterator over every stack slot in the function","Builds a <code>stackslot</code> instruction","Builds a <code>stackslot</code> instruction","Builds a non-volatile <code>store</code> instruction","Builds a non-volatile <code>store</code> instruction","Builds a volatile <code>store</code> instruction","Builds a volatile <code>store</code> instruction","Gets the value being stored","Returns a guard that allows the string pool to be read.","Returns a guard that allows the string pool to be written …","Returns a copy of <code>self</code>, but without the same name.","Creates a struct type, and returns a <code>Type</code> that refers to …","Creates a structure type from a given list of fields.","Switches to inserting at a specific block.","Gets the target branch being jumped to","Gets the possible blocks where control could be …","","","","","Shorthand for <code>Self::new(target, &amp;[])</code>. Meant for branching …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the branch being jumped to if the condition is <code>true</code>","Builds a <code>trunc</code> instruction","Builds a <code>trunc</code> instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the type of a value that was previously emitted by …","Gets the type of a value that was previously emitted by …","Gets the type of a value that was previously emitted by …","Gets the type that the stack slot is allocating space for","Gets the type of the value that a given <code>Value</code> evaluates to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shorthand for getting the <code>TypePool</code> for a given module.","Shorthand for getting the <code>TypePool</code> for a given module.","Returns a guard that allows the type pool to be read.","Returns a guard that allows the type pool to be written to.","Builds a <code>udiv</code> instruction","Builds a <code>udiv</code> instruction","Builds a <code>uitof</code> instruction","Builds a <code>uitof</code> instruction","Builds an <code>undef</code> instruction","Builds an <code>undef</code> instruction","Unpacks a <code>Type</code> into an <code>UType</code>. This makes it take up more …","Builds an <code>unreachable</code> instruction","Builds an <code>unreachable</code> instruction","Equivalent to <code>Self::as_array</code>, but panics on failure.","Equivalent to <code>Self::as_bool</code>, but panics on failure.","Equivalent to <code>Self::as_float</code>, but panics on failure.","Equivalent to <code>Self::as_int</code>, but panics on failure.","Equivalent to <code>Self::as_ptr</code>, but panics on failure.","Equivalent to <code>Self::as_struct</code>, but panics on failure.","Builds a <code>urem</code> instruction","Builds a <code>urem</code> instruction","Returns every use in the data-flow graph of a given value.","Returns the debug information for a given instruction","Returns the debug information for a given instruction","Gets the value being returned, if any.","Gets the value being inserted","Gets the actual const value being yielded as an unsigned …","Gets the byte value of the floating-point constant","Gets the actual constant value","Gets the definition of a given value","Gets the definition of a given value","Gets the definition of a given value","Converts a <code>Value</code> into an <code>Inst</code> that yields that value, if …","Converts a <code>Value</code> into an <code>Inst</code> that yields that value, if …","Converts a <code>Value</code> into an <code>Inst</code> if and only if that value …","Marks the signature as having a variable number of …","Checks if the signature is for a vararg (<code>...</code>) function. …","Visits an <code>alloca</code> instruction.","Visits an <code>alloca</code> instruction.","Visits an <code>and</code> instruction.","Visits an <code>and</code> instruction.","Visits an <code>ashr</code> instruction.","Visits an <code>ashr</code> instruction.","Visits a <code>bconst</code> instruction.","Visits a <code>bconst</code> instruction.","Called whenever an individual block is visited.","Called whenever an individual block is visited.","Called whenever an individual block is visited","Called whenever an individual block is visited","Visits a <code>br</code> instruction.","Visits a <code>br</code> instruction.","Visits a <code>btoi</code> instruction.","Visits a <code>btoi</code> instruction.","Visits a <code>call</code> instruction.","Visits a <code>call</code> instruction.","Visits a <code>condbr</code> instruction.","Visits a <code>condbr</code> instruction.","Visits an <code>elemptr</code> instruction.","Visits an <code>elemptr</code> instruction.","Visits an <code>extract</code> instruction.","Visits an <code>extract</code> instruction.","Visits an <code>fadd</code> instruction.","Visits an <code>fadd</code> instruction.","Visits an <code>fcmp</code> instruction.","Visits an <code>fcmp</code> instruction.","Visits an <code>fconst</code> instruction.","Visits an <code>fconst</code> instruction.","Visits an <code>fdiv</code> instruction.","Visits an <code>fdiv</code> instruction.","Visits an <code>fext</code> instruction.","Visits an <code>fext</code> instruction.","Visits an <code>fmul</code> instruction.","Visits an <code>fmul</code> instruction.","Visits an <code>fneg</code> instruction.","Visits an <code>fneg</code> instruction.","Visits an <code>frem</code> instruction.","Visits an <code>frem</code> instruction.","Visits an <code>fsub</code> instruction.","Visits an <code>fsub</code> instruction.","Visits an <code>ftosi</code> instruction.","Visits an <code>ftosi</code> instruction.","Visits an <code>ftoui</code> instruction.","Visits an <code>ftoui</code> instruction.","Visits an <code>ftrunc</code> instruction.","Visits an <code>ftrunc</code> instruction.","Called whenever an individual function is visited.","Called whenever an individual function is visited.","Visits a <code>globaladdr</code> instruction.","Visits a <code>globaladdr</code> instruction.","Visits an <code>iadd</code> instruction.","Visits an <code>iadd</code> instruction.","Visits an <code>icmp</code> instruction.","Visits an <code>icmp</code> instruction.","Visits an <code>iconst</code> instruction.","Visits an <code>iconst</code> instruction.","Visits an <code>imul</code> instruction.","Visits an <code>imul</code> instruction.","Visits an <code>indirectcall</code> instruction.","Visits an <code>indirectcall</code> instruction.","Visits an <code>insert</code> instruction.","Visits an <code>insert</code> instruction.","Called whenever an individual instruction is visited.","Called whenever an individual instruction is visited.","Called whenever an individual instruction is visited.","Called whenever an individual instruction is visited.","Visits an <code>isub</code> instruction.","Visits an <code>isub</code> instruction.","Visits an <code>itob</code> instruction.","Visits an <code>itob</code> instruction.","Visits an <code>itop</code> instruction.","Visits an <code>itop</code> instruction.","Visits a <code>load</code> instruction.","Visits a <code>load</code> instruction.","Visits a <code>lshr</code> instruction.","Visits a <code>lshr</code> instruction.","Visits a <code>null</code> instruction.","Visits a <code>null</code> instruction.","Visits an <code>offset</code> instruction.","Visits an <code>offset</code> instruction.","Visits an <code>or</code> instruction.","Visits an <code>or</code> instruction.","Visits a <code>ptoi</code> instruction.","Visits a <code>ptoi</code> instruction.","Visits a <code>ret</code> instruction.","Visits a <code>ret</code> instruction.","Visits an <code>sdiv</code> instruction.","Visits an <code>sdiv</code> instruction.","Visits a <code>sel</code> instruction.","Visits a <code>sel</code> instruction.","Visits a <code>sext</code> instruction.","Visits a <code>sext</code> instruction.","Visits a <code>shl</code> instruction.","Visits a <code>shl</code> instruction.","Visits a <code>sitof</code> instruction.","Visits a <code>sitof</code> instruction.","Visits a <code>srem</code> instruction.","Visits a <code>srem</code> instruction.","Visits a <code>stackslot</code> instruction.","Visits a <code>stackslot</code> instruction.","Visits a <code>store</code> instruction.","Visits a <code>store</code> instruction.","Visits a <code>trunc</code> instruction.","Visits a <code>trunc</code> instruction.","Visits an <code>udiv</code> instruction.","Visits an <code>udiv</code> instruction.","Visits a <code>uitof</code> instruction.","Visits a <code>uitof</code> instruction.","Visits an <code>undef</code> instruction.","Visits an <code>undef</code> instruction.","Visits an <code>unreachable</code> instruction.","Visits an <code>unreachable</code> instruction.","Visits a <code>urem</code> instruction.","Visits a <code>urem</code> instruction.","Visits an <code>xor</code> instruction.","Visits an <code>xor</code> instruction.","Visits a <code>zext</code> instruction.","Visits a <code>zext</code> instruction.","Walks over the module and calls the expected <code>visit_*</code> …","Walks over the module and calls the expected <code>visit_*</code> …","Walks over the module and calls the expected <code>visit_*</code> …","Walks over the module and calls the expected <code>visit_*</code> …","Gets the width of the integer.","Creates a new <code>DebugInfo</code> object that has all the fields …","Builds an <code>xor</code> instruction","Builds an <code>xor</code> instruction","Builds a <code>zext</code> instruction","Builds a <code>zext</code> instruction","A matcher that wraps up a matcher function.","A matcher that matches on values","A basic matcher for a single value/instruction in the IR.","Allows matching against <code>and</code> instructions.","Allows matching against <code>and</code> instructions and their lhs/rhs.","Allows matching against <code>ashr</code> instructions.","Allows matching against <code>ashr</code> instructions and their …","A matcher that matches on <code>bconst</code> instructions (i.e. …","A matcher that matches on <code>bconst</code> instructions with a …","A matcher that matches any binary instruction.","A matcher that matches a binary instruction.","A matcher that matches any value coming from a φ node.","A matcher that matches any value coming from a φ node …","","","","","Logical conjunction operation between two matchers.","Allows matching against <code>fadd</code> instructions.","Allows matching against <code>fadd</code> instructions and their …","Allows matching against <code>fcmp</code> instructions.","Allows matching against <code>fcmp</code> instructions and their …","A matcher that matches on <code>fconst</code> instructions (i.e. …","A matcher that matches on <code>fconst</code> instructions with a …","Allows matching against <code>fdiv</code> instructions.","Allows matching against <code>fdiv</code> instructions and their …","Allows matching against <code>fmul</code> instructions.","Allows matching against <code>fmul</code> instructions and their …","Allows matching against <code>frem</code> instructions.","Allows matching against <code>frem</code> instructions and their …","Returns the argument unchanged.","Returns the argument unchanged.","Allows matching against <code>fsub</code> instructions.","Allows matching against <code>fsub</code> instructions and their …","Allows matching against <code>iadd</code> instructions.","Allows matching against <code>iadd</code> instructions and their …","Allows matching against <code>icmp</code> instructions.","Allows matching against <code>icmp</code> instructions and their …","A matcher that matches on <code>iconst</code> instructions (i.e. …","A matcher that matches on <code>iconst</code> instructions with a …","A matcher that matches on <code>iconst</code> instructions with a …","A matcher that matches on <code>iconst</code> instructions with a …","Allows matching against <code>imul</code> instructions.","Allows matching against <code>imul</code> instructions and their …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Allows matching against <code>isub</code> instructions.","Allows matching against <code>isub</code> instructions and their …","Matches a <code>load</code> instruction","Allows matching against <code>lshr</code> instructions.","Allows matching against <code>lshr</code> instructions and their …","Returns whether or not a value matches the provided matcher","Returns whether or not an instruction matches the provided …","Runs the matcher against a given instruction. Returns …","","","Runs the matcher against a given value. Returns whether or …","","","A matcher that matches on <code>null</code> instructions (i.e. matches …","A matcher that matches on <code>null</code> instructions with a …","A matcher that matches on <code>null</code> instructions with an …","A matcher that matches on <code>null</code> instructions with an …","A matcher that matches on <code>null</code> instructions with a …","Logical disjunction operation between two matchers.","Allows matching against <code>or</code> instructions.","Allows matching against <code>or</code> instructions and their lhs/rhs.","Matches on an <code>iconst</code> value that is a power of 2","Allows matching against <code>sdiv</code> instructions.","Allows matching against <code>sdiv</code> instructions and their …","Allows matching against <code>shl</code> instructions.","Allows matching against <code>shl</code> instructions and their lhs/rhs.","Allows matching against <code>srem</code> instructions.","Allows matching against <code>srem</code> instructions and their …","Matches a <code>stackslot</code> instruction","","","","","","","Allows matching against <code>udiv</code> instructions.","Allows matching against <code>udiv</code> instructions and their …","A matcher that matches on <code>undef</code> instructions (i.e. matches …","Allows matching against <code>urem</code> instructions.","Allows matching against <code>urem</code> instructions and their …","A matcher that matches any value","A matcher that matches any value with a given type","Allows matching against <code>xor</code> instructions.","Allows matching against <code>xor</code> instructions and their lhs/rhs.","Alias for the underlying FAM type.","A lazy analysis manager for a single function in SIR.","Wrapper type that maps the function analysis manager into …","An analysis that runs over an entire function.","Manages running a set of passes over individual functions …","Adapts a function transform pass to a module pass that …","Defines a transformation over a single SIR function.","A lazy analysis manager for a module of SIR.","An analysis pass that runs over an entire module.","Manages running a set of passes over IR.","Models a pass that possibly performs a transformation over …","Models the set of analyses that a given transformation pass","The result type of a given analysis.","The result type of a given analysis.","Adapts a given pass into a <code>FunctionToModulePassAdapter</code> …","Registers a function analysis pass. The pass is not run, …","Registers a module analysis pass. The pass is not run, but …","Adds a transformation pass to the pass manager. This pass…","Adds a transformation pass to the pass manager. This pass…","Returns a <code>PreservedAnalyses</code> that marks every analysis as …","Allows an analysis to define any other analysis that it …","","","","","","","","","","","","","","","","","","","Allows analyses to declare dependence on other analyses.","Allows analyses to declare dependence on other analyses.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Lazily gets the result of an analysis. If the analysis has …","Lazily gets the result of an analysis. If the analysis has …","Initializes the analysis manager for a given bit of IR.","Initializes the analysis manager for a given bit of IR.","Gets the intersection of two sets of preserved analyses, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Tells the analysis that it has been invalidated. It also …","Tells the analysis that it has been invalidated. It also …","Tells the analysis that it has been invalidated. It also …","Tells the analysis that it has been invalidated. It also …","","Invalidates a set of analyses for a given function.`","Invalidates a set of analyses for a given module.","Checks if an analysis is preserved. If all are preserved …","Creates a new <code>FunctionAnalysisManager</code>.","Creates a new <code>ModuleAnalysisManager</code>.","Creates a new, empty, module pass manager.","Creates an empty function pass manager.","Returns a <code>PreservedAnalyses</code> that marks every analysis as …","Reports that an analysis is preserved by the current …","Checks if <em>all</em> analyses are preserved by a given …","Performs the analysis and returns a computed result. This …","Performs the analysis and returns a computed result. This …","Performs the transformation over a given SIR module.","Performs the transformation over a given SIR function.","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps the FAM into a module pass.","<code>ashr</code>","<code>alloca</code>","<code>and</code>","<code>bconst</code>","<code>btoi</code>","A binary literal, e.g. <code>0b1010</code>","<code>bool</code>","A <code>bool</code> literal","<code>br</code>","<code>byval</code>","<code>ccc</code>","<code>call</code>","An opcode for <code>icmp</code> or <code>fcmp</code>","<code>:</code>","<code>,</code>","The comparison performed by a given <code>icmp</code> or <code>fcmp</code> …","<code>condbr</code>","<code>}</code>","<code>{</code>","A decimal literal, e.g. <code>-1</code> or <code>42</code>","<code>elemptr</code>","<code>eq</code>","<code>=</code>","Contains the error value","A parse error of some sort, this can be formatted by the …","<code>extract</code>","<code>f32</code>","<code>f64</code>","<code>fadd</code>","<code>fcmp</code>","<code>fconst</code>","<code>fdiv</code>","<code>fext</code>","<code>fmul</code>","<code>fneg</code>","<code>frem</code>","<code>fsub</code>","<code>ftosi</code>","<code>ftoui</code>","<code>ftrunc</code>","<code>NaN</code>","A way of representing raw byte values for floating-point …","C-style scientific notation, e.g. <code>0.3e9</code>, <code>1.0e-9</code>","A floating-point literal Standard float notation, e.g. …","Different types of (unparsed) floating-point literals","<code>fn</code>","<code>globaladdr</code>","A global identifier, <code>@ident</code>","A hex literal, e.g. <code>0xdeadbeef</code> or <code>0xDEADBEEF</code>","<code>i16</code>","<code>i32</code>","<code>i64</code>","<code>i8</code>","<code>iadd</code>","<code>icmp</code>","<code>iconst</code>","<code>imul</code>","<code>isub</code>","<code>itob</code>","<code>itop</code>","<code>indirectcall</code>","<code>insert</code>","A binary literal, e.g. <code>0b1010</code>","A decimal literal, e.g. <code>-1</code> or <code>42</code>","An integer literal A hex literal, e.g. <code>0xdeadbeef</code> or …","An octal literal, e.g. <code>0o715</code>","Different types of (unparsed) integer literals","<code>lshr</code>","A label identifier, <code>ident</code>","A lexer for SIR that lazily produces tokens.","<code>load</code>","A local identifier, <code>%ident</code>","<code>NaN</code>","<code>ne</code>","<code>noalias</code>","<code>nonnull</code>","<code>null</code>","An octal literal, e.g. <code>0o715</code>","<code>oeq</code>","<code>offset</code>","<code>oge</code>","<code>ogt</code>","Contains the success value","<code>ole</code>","<code>olt</code>","<code>one</code>","An instruction opcode, e.g. the <code>iadd</code> in <code>iadd i32 %0, %1</code>.","An instruction opcode","<code>or</code>","<code>ord</code>","<code>ptoi</code>","<code>)</code>","<code>(</code>","A typedef for a <code>Result</code> that has <code>Error</code> as the <code>Err</code> type","A parser that parses a string containing Sapphire IR.","<code>ptr</code>","A way of representing raw byte values for floating-point …","<code>ret</code>","<code>sdiv</code>","<code>sitof</code>","<code>srem</code>","C-style scientific notation, e.g. <code>0.3e9</code>, <code>1.0e-9</code>","<code>sel</code>","<code>sext</code>","<code>sge</code>","<code>sgt</code>","<code>shl</code>","<code>sle</code>","<code>slt</code>","<code>]</code>","<code>[</code>","<code>stack</code>","A stack identifier, <code>$ident</code>","<code>stackslot</code>","Standard float notation, e.g. <code>3.141592</code>","<code>store</code>","<code>sysv</code>","A token yielded by the lexer, containing line/col …","A single lex token","<code>trunc</code>","<code>udiv</code>","<code>uitof</code>","<code>urem</code>","<code>ueq</code>","<code>uge</code>","<code>ugt</code>","<code>ule</code>","<code>ult</code>","<code>undef</code>","<code>une</code>","An unknown token, almost certainly an error","<code>uno</code>","<code>unreachable</code>","<code>...</code>","<code>void</code>","<code>volatile</code>","<code>win64</code>","<code>x</code>","<code>xor</code>","<code>zext</code>","If <code>self</code> is one of the float literals, returns it in a …","If <code>self</code> is one of the integer literals, returns it in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The column in the original source that the token is …","","","","","","","","","","","","","The error message","","","","","","","","","Formats a <code>reader2::Parser</code> error into a human-readable …","Formats errors emitted by the verifier, this is also used …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether or not the lexer is able to yield more …","The total length of the token","The line in the original source that the token is located …","Creates a new <code>Lex</code> based on a given source file.","Creates a parser for a <code>Module</code> based on a file named <code>name</code>.","Produces the next token, if one exists. If <code>None</code> is …","The token, if one exists","Parses the file, and if there are no errors returns a …","Parses SIR source code using the <code>reader2</code> parser.","Peek at the next token to be yielded, if there are any","","","","","","","","","The raw token data","","","","","","","","","","","","","","","","","","","","","","","","","","","","An aggressive dead code elimination pass.","Wrapper pass that prints out a textual representation of a …","A simple GVN (global value numbering) pass.","A memory to SSA promotion pass.","This is a pass that writes out a textual representation of …","A Sparse Conditional Constant Propagation pass.","A control-flow graph simplification pass.","A peephole optimization and algebraic simplification pass.","Performs critical-edge splitting.","An IR validity verification pass.","Scans over an entire function and removes dead …","","","","","","","","","","","","","","","","","","","","","Common utilities that are needed between different …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Runs a global value-numbering algorithm over <code>func</code> to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Promotes function-local memory (that doesn’t escape) …","","","","","","","","","","","Performs critical edge splitting over a function. Each …","Shorthand for a writer that prints to <code>std::io::stderr</code>.","Shorthand for a writer that prints to <code>std::io::stderr</code>.","Shorthand for a writer that prints to <code>std::io::stdout</code>.","Shorthand for a writer that prints to <code>std::io::stdout</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that an entire module is valid SIR.","This is <code>verify_module</code>, except that it writes out any errors","Creates an instance of the pass with a given writer.","Creates an instance of the pass with a given writer.","A generic “fold this instruction if possible” utility. …","","","Returns the argument unchanged.","Checks whether a given instruction possibly has a side …","Calls <code>U::from(self)</code>.","Removes a parameter from a block and rewrites all branches …","Rewrites a branch target to replace an argument with …","Attempts to perform trivial constant folding on a single …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements IntoIter for a <code>TinyArray</code>.","Models a type that can be traversed in a tree-like …","The node type of the tree","Helper trait for a type that can be packed into a …","Provides an <code>Option</code>-like type for <code>Packable</code> objects without …","Effectively the same thing as <code>SpinMutex</code>, except it doesn’…","Alias for …","Alias for <code>std::collections::HashSet&lt;V, ahash::RandomState&gt;</code>…","A TTAS (test and test-and-set) spin-lock.","A reference to a string inside of a given <code>StringPool</code>. …","Contains a number of heap-allocated strings, and provides …","A simple thread pool implementation.","A tiny, specialized container for one purpose: storing …","Converts a <code>PackedOption&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by performing a …","Converts a <code>PackedOption&lt;T&gt;</code> to <code>PackedOption&lt;U&gt;</code> by …","Gets the underlying array as a slice.","Gets the underlying array as a slice.","","","","","","","","","","","","","","","","","","","Returns the list of children that a given node has","","","","","","","","","","","","","","","","","","","","","","","","","","","","Expand the packed option into a normal <code>Option</code> that can be …","Expand the packed option into a normal <code>Option</code> that can be …","Unwrap a packed <code>Some</code> value or panic.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an inline <code>TinyArray</code> from an array","","Creates a <code>TinyArray</code> by cloning elements from a slice.","Creates a <code>TinyArray&lt;T, N&gt;</code> from a given <code>SmallVec&lt;[T; N]&gt;</code>.","Creates a <code>TinyArray</code> from a given <code>Vec</code>.","Gets the string at a given <code>Str</code> index. If the index somehow …","","","","","Inserts a string into the pool and returns a reference …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if the array is empty.","Checks if the pool contains any strings.","Checks if <code>self</code> is in the inline state.","Returns <code>true</code> if the packed option is a <code>None</code> value.","Checks if the current object is equivalent to the constant …","","Returns <code>true</code> if the packed option is a <code>Some</code> value.","Checks if <code>self</code> is in the heap-allocated state.","Gets the underlying array as a slice.","Gets the underlying array as a slice.","Returns the length of the array.","Returns the number of unique strings stored inside the …","Locks the mutex, potentially waiting if it’s already …","Locks the mutex, potentially waiting if it’s already …","Maps a <code>PackedOption&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function …","Creates a new unlocked <code>SpinMutex</code>.","Creates a new unlocked <code>RawSpinMutex</code>.","Creates an empty string pool that has no valid indices …","","","Creates a <code>None</code> instance of <code>PackedOption</code>.","","","","Replaces the value in the packed option, returning the old …","Gets the reserved value of the type.","","Returns the root tree node","","","","","Returns a “moving window” iterator that goes over …","","Creates a <code>Some</code> instance of <code>PackedOption</code>.","Prints a tree in a consistent format.","Takes the value out of the packed option, leaving a <code>None</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unlocks the mutex. This follows the semantics of …","Unlocks the mutex. This follows the semantics of …","Unwrap a packed <code>Some</code> value or panic.","Provides an iterator over all of the strings that are in …","An array of SIR values","A <code>bool</code> value","Abstract interface for an “engine” that can execute …","An <code>f32</code> value","An <code>f64</code> value","Provides a translation layer between the specific values …","An <code>i16</code> value","An <code>i32</code> value","An <code>i64</code> value","An <code>i8</code> value","An implementation of an engine as a SIR interpreter.","A structure of SIR values","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Registers a function with a given name as the definition …","Runs the entry point specified by <code>entry</code>. The value returned","Runs the module as-if it was a C program, and returns the …","","","","","","","Creates an engine instance that will execute <code>module</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,16,14,18,13,19,20,7,9,16,14,18,13,19,20,7,9,7,7,9,14,13,0,9,9,16,18,19,20,7,9,16,14,18,13,19,20,7,14,7,9,7,9,16,14,18,13,19,20,7,13,9,13,7,13,13,13,9,13,0,9,9,9,16,18,19,20,9,0,13,7,9,16,14,18,13,19,20,7,9,16,14,18,13,19,20,7,7,9,16,14,18,13,19,20,7,7,0,0,0,36,0,0,0,0,35,37,48,43,40,41,35,37,48,43,40,41,35,37,40,41,41,41,35,37,43,40,41,35,37,43,40,41,35,37,40,41,35,37,40,41,35,37,40,41,35,35,37,40,41,35,37,40,41,35,35,37,48,43,40,41,35,37,48,43,40,41,40,35,37,40,35,40,41,35,37,40,35,40,35,37,40,41,37,35,37,48,43,40,41,35,37,48,43,40,41,35,37,40,41,35,37,40,35,40,36,36,35,37,40,41,37,40,40,35,37,48,40,35,41,35,35,37,40,41,48,43,48,43,37,40,35,41,35,37,40,37,40,35,37,40,41,35,37,40,48,43,35,35,37,43,40,41,35,37,48,43,40,41,35,37,48,43,40,41,35,37,48,43,40,41,35,37,40,35,40,35,37,40,41,35,41,57,0,58,0,58,0,0,61,57,61,59,61,57,58,59,61,57,58,57,58,57,58,0,0,0,57,58,57,58,0,59,61,57,58,61,57,58,0,59,59,61,57,58,0,0,59,0,57,58,0,0,59,61,57,58,59,61,57,58,59,61,57,58,0,59,0,97,81,0,0,73,0,81,81,83,0,0,0,0,0,0,0,0,0,65,81,0,0,0,90,0,0,0,92,0,0,91,65,0,90,0,0,0,0,0,0,0,0,0,0,0,84,92,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,91,95,0,95,0,0,0,0,0,84,0,0,0,0,0,97,81,81,81,64,64,67,70,72,67,303,304,104,73,77,73,77,83,82,84,86,64,64,64,64,69,72,72,65,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,74,68,79,77,123,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,91,88,76,78,87,66,93,86,95,69,84,97,81,70,90,68,79,77,98,100,101,64,73,65,102,72,308,104,94,67,309,309,69,73,88,87,66,86,68,79,64,64,64,64,64,69,69,69,91,88,76,78,87,66,93,86,95,69,84,97,81,70,90,68,79,77,98,91,88,76,78,87,66,93,86,95,69,84,97,81,70,90,68,79,77,98,80,65,65,69,72,68,79,89,91,88,76,78,87,66,93,94,86,95,67,96,69,69,84,97,81,81,70,90,68,79,77,98,102,310,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,76,110,93,82,77,98,81,77,64,80,80,74,74,91,88,76,78,87,66,93,86,95,69,84,97,81,70,68,79,77,98,123,68,79,65,65,65,65,68,79,65,102,68,79,89,101,67,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,121,73,73,64,73,73,77,88,87,66,93,86,73,69,73,73,77,88,87,66,86,68,79,77,98,88,87,66,86,68,79,77,98,101,69,102,308,73,310,306,105,105,74,74,308,75,96,64,64,74,64,64,72,310,119,80,102,64,102,121,64,83,82,110,86,94,102,64,69,110,91,88,76,78,87,66,93,86,95,69,84,97,81,70,90,68,79,77,98,0,65,102,102,64,123,74,72,72,311,311,69,65,64,74,74,101,88,87,66,93,86,64,64,74,73,124,72,119,0,88,87,66,86,68,79,70,69,74,75,74,74,101,69,69,73,80,64,64,101,64,76,78,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,98,69,81,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,119,123,89,110,82,305,306,64,80,72,121,75,307,100,101,304,104,124,308,91,88,76,78,87,66,92,93,94,86,95,67,96,69,84,97,81,70,90,68,79,77,98,102,123,73,89,64,76,308,124,68,79,0,305,305,305,312,313,312,313,0,0,0,0,0,0,0,130,130,130,130,0,0,0,0,0,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,0,128,130,128,130,0,0,0,128,130,128,130,0,0,0,0,0,0,0,0,0,0,0,0,0,130,130,130,130,0,0,0,0,0,0,0,175,175,0,135,0,160,171,160,139,175,175,139,143,0,135,0,135,0,135,0,0,0,135,0,135,165,166,167,168,169,168,169,0,0,0,171,135,143,175,141,144,0,0,135,0,144,0,175,175,140,140,177,0,0,135,0,135,147,149,0,0,135,0,0,135,0,175,175,0,135,0,177,139,140,145,145,0,141,147,148,0,135,0,135,0,135,0,135,0,135,0,135,0,135,0,135,171,140,175,175,175,175,0,135,0,135,0,135,175,144,160,141,0,135,0,135,0,135,168,169,139,139,143,103,103,103,103,103,103,103,103,103,103,103,103,103,103,168,169,103,103,103,146,147,148,149,0,0,0,146,146,146,146,0,135,146,146,146,175,165,166,167,160,0,0,146,0,135,160,139,160,146,139,160,171,0,0,0,135,144,0,135,0,0,0,0,0,143,0,0,0,143,160,175,135,135,127,103,127,189,136,190,314,137,138,191,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,127,189,136,190,314,137,138,191,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,150,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,176,178,135,103,103,185,186,187,188,185,186,187,188,135,151,152,153,154,155,156,157,158,159,176,180,142,142,142,168,169,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,145,103,103,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,158,159,170,172,0,189,127,189,136,190,314,137,138,191,139,140,141,142,142,143,144,145,146,147,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,142,142,143,140,141,142,181,182,136,137,138,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,103,103,103,103,181,182,103,127,189,136,190,314,137,138,191,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,143,135,135,161,164,170,172,173,174,135,189,190,191,190,191,136,137,138,136,137,138,136,137,138,189,145,127,145,161,172,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,103,136,137,138,103,162,163,136,137,138,136,137,138,136,137,138,135,161,164,170,172,173,174,145,136,137,138,151,152,153,154,155,157,158,159,142,142,142,146,136,137,138,136,137,138,135,178,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,127,189,136,190,314,137,138,191,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,127,189,136,190,314,137,138,191,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,127,189,136,190,314,137,138,191,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,135,185,186,187,188,103,135,156,179,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,152,153,161,162,163,164,168,169,173,174,179,180,154,155,137,103,235,240,235,0,235,0,0,0,0,249,240,235,0,235,0,240,0,0,0,0,0,249,235,0,217,235,0,0,0,0,235,0,0,0,0,0,0,248,132,235,0,235,0,235,235,0,0,235,0,235,235,235,235,235,235,235,235,235,0,249,0,0,0,0,0,0,0,0,0,0,0,235,0,235,235,0,0,235,0,235,235,235,235,235,0,235,0,0,0,242,0,0,0,0,0,249,235,0,235,0,0,0,0,132,231,232,231,232,231,232,255,240,235,0,243,243,243,243,243,243,243,235,0,235,235,242,0,0,0,249,0,235,0,0,0,235,132,132,0,235,132,132,235,235,0,235,235,0,0,0,248,255,0,235,0,0,235,0,0,249,217,0,235,0,0,235,243,132,243,132,243,235,132,243,132,243,243,243,235,0,0,235,0,235,0,0,0,217,235,235,196,198,215,117,216,200,207,199,218,218,192,315,315,315,315,220,222,220,218,220,222,224,113,115,32,33,33,33,33,33,33,33,315,315,210,199,315,315,231,232,231,232,231,232,231,232,218,224,222,222,316,316,220,222,316,316,220,222,222,33,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,315,315,316,316,218,315,315,315,216,221,237,238,315,315,315,315,231,231,315,315,113,115,236,8,233,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,8,233,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,8,233,240,126,34,25,231,232,217,239,236,23,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,246,226,229,228,248,227,225,230,33,249,219,12,315,315,211,198,235,1,317,317,220,218,317,317,220,317,317,220,218,220,218,220,12,316,316,220,316,316,316,316,220,316,316,316,316,220,318,218,1,316,250,251,317,251,216,218,112,222,32,220,1,1,12,12,8,233,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,222,246,247,1,32,226,229,228,248,227,225,230,33,249,315,221,316,316,237,238,220,112,319,319,318,318,319,319,319,319,320,320,319,319,318,318,225,315,315,316,316,220,222,8,233,240,126,34,25,241,242,219,231,232,118,217,239,236,23,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,246,226,229,228,248,227,225,230,33,249,8,233,240,126,34,25,241,242,219,231,232,118,217,239,236,23,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,246,226,229,228,248,227,225,230,33,249,315,315,33,33,315,315,219,198,315,315,315,315,315,315,315,315,315,315,219,220,218,220,1,33,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,315,315,315,315,227,315,315,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,33,249,249,224,315,315,315,315,315,315,315,315,12,251,317,251,220,1,220,1,1,206,315,315,316,316,316,316,316,316,316,316,316,316,316,316,118,321,321,8,233,240,126,34,25,241,242,219,231,232,118,217,239,236,23,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,246,226,229,228,248,227,225,230,33,249,33,33,33,33,315,315,315,315,315,315,315,315,315,315,1,211,211,220,315,315,200,207,199,315,315,317,317,315,315,222,222,222,222,218,1,316,316,222,316,316,218,316,316,218,222,222,316,316,220,218,222,33,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,234,245,33,33,218,222,218,33,33,231,259,205,201,244,235,12,225,316,316,220,33,33,33,33,228,33,228,33,228,33,228,33,218,222,33,33,118,231,232,231,232,33,8,126,34,25,239,23,33,218,33,218,236,208,213,315,315,315,315,315,315,8,126,34,25,239,23,8,126,34,25,239,23,316,316,220,112,225,222,222,259,259,219,315,315,315,315,222,315,315,206,228,0,230,319,233,241,219,12,204,1,216,218,219,12,224,222,1,32,234,245,316,316,316,316,218,315,315,315,315,210,210,205,201,235,322,322,321,218,235,205,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,315,315,250,251,249,216,216,216,233,236,216,8,233,240,126,34,25,231,232,217,239,236,23,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,246,226,229,228,248,227,225,230,33,249,208,213,316,250,251,316,316,316,316,315,315,33,317,317,218,317,317,218,317,317,222,317,317,222,317,317,218,317,317,317,317,218,218,317,317,218,8,126,34,25,239,23,33,318,321,235,205,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,216,315,315,315,315,315,315,216,236,236,236,12,317,317,218,317,317,218,224,259,259,315,315,315,315,8,233,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,222,246,247,1,32,226,229,228,248,227,225,230,33,249,316,250,251,315,315,315,315,113,115,228,220,218,12,315,315,212,315,315,316,316,218,218,315,315,315,315,315,315,213,247,247,219,32,33,220,196,323,196,198,215,117,224,8,233,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,198,315,315,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,316,316,220,241,218,216,221,237,238,250,251,8,233,220,240,126,34,25,241,242,218,219,231,232,118,217,239,236,23,112,12,235,224,132,205,243,201,211,196,198,215,117,244,197,203,113,115,192,208,213,210,200,207,199,206,202,195,214,209,212,204,234,245,222,246,247,1,32,226,229,228,248,227,225,230,33,249,1,1,247,247,315,315,315,315,315,315,33,315,315,33,33,33,33,33,33,315,315,218,316,316,117,207,206,202,195,316,316,218,316,316,218,216,236,319,320,319,320,319,320,319,320,319,319,318,318,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,319,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,319,318,318,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,320,319,319,318,318,228,219,315,315,315,315,0,0,0,0,0,0,0,0,0,0,0,0,0,260,262,260,262,0,0,0,0,0,0,0,0,0,0,0,0,0,260,262,0,0,0,0,0,0,0,0,0,0,0,0,260,262,0,0,0,0,0,0,0,258,260,262,258,260,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,260,262,260,262,260,262,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,266,265,263,29,30,267,269,125,0,270,263,125,29,30,267,269,270,263,125,29,30,267,269,29,30,267,269,266,265,270,125,29,30,270,263,125,29,30,267,269,29,30,29,30,125,270,263,125,29,30,267,269,266,266,265,265,270,29,30,125,29,30,267,269,125,125,125,266,265,268,264,270,263,267,269,270,263,125,29,30,267,269,270,263,125,29,30,267,269,270,263,125,29,30,267,269,270,275,275,275,275,275,274,272,272,275,272,272,275,272,272,272,0,275,272,272,274,275,276,272,281,0,275,272,272,275,275,275,275,275,275,275,275,275,275,275,275,272,272,272,272,0,272,275,272,274,272,272,272,272,275,275,275,275,275,275,275,275,275,272,272,272,272,0,275,272,0,275,272,273,276,272,272,275,274,276,275,276,276,281,276,276,276,0,272,275,276,275,272,272,0,0,272,273,275,275,275,275,273,275,275,276,276,275,276,276,272,272,272,272,275,273,275,272,0,0,275,275,275,275,276,276,276,276,276,275,276,272,276,275,272,272,272,272,272,275,275,272,272,279,280,275,276,274,273,272,277,278,279,280,275,276,274,273,272,277,278,275,276,274,273,272,277,278,275,276,274,273,272,277,278,277,275,276,274,273,272,277,275,276,274,273,272,277,278,275,276,274,273,272,277,278,278,0,0,279,280,275,276,274,273,272,277,278,275,276,274,273,272,277,279,280,275,276,274,273,272,277,278,279,277,277,279,280,279,278,280,0,279,275,276,274,273,272,277,278,278,277,279,280,275,276,274,273,272,277,278,279,280,275,276,274,273,272,277,278,279,280,275,276,274,273,272,277,278,0,0,0,0,0,0,0,0,0,0,0,282,283,284,285,286,287,288,289,290,291,282,283,284,285,286,287,288,289,290,291,0,282,283,284,285,286,287,288,289,290,291,0,282,283,284,285,286,287,288,289,290,291,0,282,283,284,285,286,287,288,289,290,291,0,286,287,286,287,282,283,284,285,286,287,288,289,290,291,282,283,284,285,286,287,288,289,290,291,282,283,284,285,286,287,288,289,290,291,0,0,286,287,0,293,293,293,0,293,0,0,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,0,0,301,0,0,0,0,0,0,0,0,0,0,294,294,223,223,298,299,324,223,223,294,108,120,297,298,299,324,223,223,294,108,120,297,301,223,294,108,120,223,294,108,120,223,294,108,294,120,223,223,223,294,108,120,223,223,294,108,120,223,294,108,294,294,294,223,294,108,120,297,298,299,324,223,294,294,108,120,297,223,223,223,223,223,120,223,294,108,120,120,298,299,324,223,294,108,120,297,223,297,223,120,223,294,295,108,294,223,223,223,223,120,298,299,294,298,299,120,297,297,294,223,294,108,294,295,108,301,223,294,108,120,0,297,294,0,294,223,294,108,120,298,299,324,223,294,108,120,297,298,299,324,223,294,108,120,297,298,299,324,223,294,108,120,297,298,299,294,120,302,302,0,302,302,0,302,302,302,302,0,302,302,325,302,325,302,325,302,325,326,326,326,302,325,302,325,302,325,326],"f":[0,0,0,0,0,0,0,0,0,0,0,[[1,2,[4,[3]],[4,[5]]],6],0,0,0,0,0,0,0,0,0,0,0,[[7,8],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,[[11,[10]]]],[7,7],[[-1,-2],6,[],[]],[[12,13],9],[[13,9],14],[12,13],[12,[[15,[8]]]],[9,[[15,[8]]]],[[9,8,8],2],[16,[[4,[17]]]],[18,[[4,[17]]]],[19,[[4,[17]]]],[20,[[4,[17]]]],[[7,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[14,8],[[4,[8]]]],[[7,23],5],[[9,8],[[24,[8]]]],[[7,25],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[13,8,8],2],[[9,8],2],[[13,8,8],2],[7,5],[[13,8],26],[[13,8],26],[13,[[0,[27]]]],[9,[[4,[8]]]],[[13,8],[[0,[28]]]],[1,6],[9,[[0,[27]]]],[9,8],[9],[[16,12,29]],[[18,12,29]],[[19,12,29]],[[20,1,30]],[[9,8,8],2],[1,3],[[13,8],[[0,[28]]]],[-1,-2,[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[7,32,33],3],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[7,34],5],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],26,36,[]],[[[37,[-1,-2]]],26,36,[38,39]],[[[40,[-1,-2]]],26,36,[]],[[[41,[-1]]],26,36],[[[41,[-1]]],26,36],[[[41,[-1]]],6,36],[[[35,[-1,-2]]],[[35,[-1,-2]]],36,42],[[[37,[-1,-2]]],[[37,[-1,-2]]],36,[38,39,42]],[[[43,[-1]]],[[43,[-1]]],[42,36]],[[[40,[-1,-2]]],[[40,[-1,-2]]],[42,36],42],[[[41,[-1]]],[[41,[-1]]],[42,36]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[35,[-1,-2]],-1],2,36,[]],[[[37,[-1,-2]],-1],2,36,[38,39]],[[[40,[-1,-2]],-1],2,36,[]],[[[41,[-1]],-1],2,36],[[],[[35,[-1,-2]]],36,[]],[[],[[37,[-1,-2]]],36,[38,39]],[[],[[40,[-1,-2]]],36,[]],[[],[[41,[-1]]],36],[-1,[[31,[[35,[-2,-3]]]]],44,36,45],[-1,[[31,[[37,[-2,-3]]]]],44,36,[38,39,45]],[-1,[[31,[[40,[-2,-3]]]]],44,36,45],[-1,[[31,[[41,[-2]]]]],44,36],[[[35,[-1,-2]]],6,36,[]],[[[35,[-1,-2]],[35,[-1,-2]]],2,36,46],[[[37,[-1,-2]],[37,[-1,-2]]],2,36,[38,39]],[[[40,[-1,-2]],[40,[-1,-2]]],2,36,46],[[[41,[-1]],[41,[-1]]],2,36],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],[[35,[-1,-2]]],36,42],[[[35,[-1,-2]],21],22,36,47],[[[37,[-1,-2]],21],22,36,[47,39,38]],[[[48,[-1,-2,-3]],21],22,[27,47],[36,47],47],[[[43,[-1]],21],22,[47,36]],[[[40,[-1,-2]],21],22,36,47],[[[41,[-1]],21],22,36],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[40,[-2,-3]]],49,36,[]],[[[35,[-1,-2]],-1],[[24,[-2]]],36,[]],[[[37,[-1,-2]],-1],[[24,[-2]]],36,[38,39]],[[[40,[-1,-2]],-1],[[24,[-2]]],36,[]],[[[35,[-1,-2]],-1],[[24,[-2]]],36,[]],[[[40,[-1,-2]],-1],[[24,[-2]]],36,[]],[[[41,[-1]],-2],6,36,50],[[[35,[-1,-2]],-1],[],36,[]],[[[37,[-1,-2]],-1],[],36,[38,39]],[[[40,[-1,-2]],-1],[],36,[]],[[[35,[-1,-2]],-1],[],36,[]],[[[40,[-1,-2]],-1],[],36,[]],[[[35,[-1,-2]],-1,-2],[[24,[-2]]],36,[]],[[[37,[-1,-2]],-2],-1,36,[38,39]],[[[40,[-1,-2]],-2],-1,36,[]],[[[41,[-1]],-1],2,36],[[[37,[-1,-2]],-2],-1,36,[42,38,39]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[],36,[]],[[[37,[-1,-2]]],[],36,[38,39]],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]]],[],36,[]],[[[41,[-1]]],[],36],[[[35,[-1,-2]]],2,36,[]],[[[37,[-1,-2]]],2,36,[38,39]],[[[40,[-1,-2]]],2,36,[]],[[[41,[-1]]],2,36],[[[35,[-1,-2]]],[[0,[27]]],36,[]],[[[37,[-1,-2]]],[[0,[27]]],36,[38,39]],[[[40,[-1,-2]]],[[0,[27,51,28]]],36,[]],[[[35,[-1,-2]]],[[0,[27]]],36,[]],[[[40,[-1,-2]]],[[0,[27,51,28]]],36,[]],[-1,26,[]],[26,-1,[]],[[[35,[-1,-2]]],[[0,[27]]],36,[]],[[[37,[-1,-2]]],[[0,[27]]],36,[38,39]],[[[40,[-1,-2]]],[[43,[-1]]],36,[]],[[[41,[-1]]],[[0,[27]]],36],[[[37,[-1,-2]]],[[24,[[6,[-1,-2]]]]],36,[38,39]],[[[40,[-1,-2]]],[[24,[[6,[-1,-2]]]]],36,[]],[[[40,[-1,-2]]],[[24,[[6,[-1,-2]]]]],36,[]],[[[35,[-1,-2]]],26,36,[]],[[[37,[-1,-2]]],26,36,[38,39]],[[[48,[-1,-2,-3]]],26,[27,28],36,[]],[[[40,[-1,-2]]],26,36,[]],[[[40,[-1,-2]],-3],[[35,[-1,-4]]],36,[],52,[]],[[[40,[-1,-2]],-3],[[41,[-1]]],36,[],52],[[[40,[-1,-2]],-3],[[35,[-1,-4]]],36,[],52,[]],[[],[[35,[-1,-2]]],36,[]],[[],[[37,[-1,-2]]],36,[38,39]],[[],[[40,[-1,-2]]],36,[]],[[],[[41,[-1]]],36],[[[48,[-1,-2,-3]]],24,27,36,[]],[[[43,[-1]]],24,36],[[[48,[-1,-2,-3]]],24,[27,51,28],36,[]],[[[43,[-1]]],24,36],[[[37,[-1,-2]]],-1,36,[38,39]],[[[40,[-1,-2]]],-1,36,[]],[[[35,[-1,-2]],-1],2,36,[]],[[[41,[-1]],-1],2,36],[[[35,[-1,-2]],26],6,36,[]],[[[37,[-1,-2]],26],6,36,[38,39]],[[[40,[-1,-2]],26],6,36,[]],[[[37,[-1,-2]],26],6,36,[38,39]],[[[40,[-1,-2]],26],6,36,[]],[[[35,[-1,-2]],-3],31,36,53,54],[[[37,[-1,-2]],-3],31,36,[38,39,53],54],[[[40,[-1,-2]],-3],31,36,53,54],[[[41,[-1]],-2],31,36,54],[[[35,[-1,-2]]],6,36,[]],[[[37,[-1,-2]]],6,36,[38,39]],[[[40,[-1,-2]]],6,36,[]],[[[48,[-1,-2,-3]]],[[6,[26,[24,[26]]]]],27,36,[]],[[[43,[-1]]],[[6,[26,[24,[26]]]]],36],[[[35,[-1,-2]],-1],[[24,[-2]]],36,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[[35,[-1,-2]]],[[0,[27]]],36,[]],[[[37,[-1,-2]]],[[0,[27]]],36,[38,39]],[[[40,[-1,-2]]],[[55,[-2]]],36,[]],[[[35,[-1,-2]]],[[0,[27]]],36,[]],[[[40,[-1,-2]]],[[56,[-2]]],36,[]],[26,[[35,[-1,-2]]],36,[]],[26,[[37,[-1,-2]]],36,[38,39]],[26,[[40,[-1,-2]]],36,[]],[26,[[41,[-1]]],36],[[[40,[-1,-2]]],[[35,[-1,-3]]],36,[],[]],[[[40,[-1,-2]]],[[41,[-1]]],36,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[58,58],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],[[0,[[60,[59]]]]]],[[],[[0,[[60,[57]]]]]],[[],[[0,[[60,[58]]]]]],[[57,57],2],[[58,58],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],[[0,[[60,[[24,[61]]]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[31,[61]]]],[5,[[31,[57]]]],[5,[[31,[58]]]],[[],[[0,[[60,[[15,[62]]]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[60,[[24,[26]]]]]]]],[[],[[0,[[60,[[24,[62]]]]]]]],0,[[],[[0,[[60,[[15,[3]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,5],[[63,[59]]]],[[5,5,-2],[[63,[[6,[-1,59]]]]],[],[[60,[-1]]]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[],[[0,[[60,[2]]]]]],0,[[],[[0,[[60,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[64,[-1]],25,25],2,65],[[[64,[-1]]],66,65],[[67,68,69],6],[70,71],[[[72,[-1]]],[[4,[-1]]],73],[67,[[0,[27]]]],[[72,74],75],[[72,74],75],[[72,74],75],[-1,[[24,[76]]],[]],[77,[[24,[68]]]],[-1,[[24,[78]]],[]],[77,[[24,[79]]]],[[80,81,2],3],[[[82,[-1,-2]],81,2],3,65,[[83,[-1]]]],[84,34],[85,86],[[[64,[-1]],68],6,65],[[[64,[-1]],68],6,65],[[[64,[-1]],[4,[68]]],6,65],[[[64,[-1]]],6,65],[[85,85],69],[[[72,[-1]],87],[[4,[-1]]],73],[[[72,[-1]]],[[0,[27]]],73],[[],70],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,88],89,[]],[68,90],[79,90],[77,90],0,[91,91],[88,88],[76,76],[78,78],[87,87],[66,66],[92,92],[93,93],[94,94],[86,86],[95,95],[67,67],[96,96],[69,69],[84,84],[97,97],[81,81],[70,70],[90,90],[68,68],[79,79],[77,77],[98,98],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[91,91],99],[[88,88],99],[[76,76],99],[[78,78],99],[[87,87],99],[[66,66],99],[[93,93],99],[[86,86],99],[[95,95],99],[[69,69],99],[[84,84],99],[[97,97],99],[[81,81],99],[[70,70],99],[[90,90],99],[[68,68],99],[[79,79],99],[[77,77],99],[[98,98],99],[[[72,[-1]]],100,73],[[[72,[-1]],74],101,73],[[[64,[-1]],34,77],6,65],[[26,77,98],-1,[]],[[],97],[[[102,[-1]]],97,65],[[[72,[-1]]],[[0,[27]]],73],[94,[[102,[103]]]],[[],104],[[],94],[[],67],[-1,105,[]],[[-1,12,[102,[-2]]],[[106,[74]]],[],[]],[85,69],[[-1,74,107],6,[]],[-1,[[31,[88]]],44],[-1,[[31,[87]]],44],[-1,[[31,[66]]],44],[-1,[[31,[86]]],44],[-1,[[31,[68]]],44],[-1,[[31,[79]]],44],[[[64,[-1]]],6,65],[[[64,[-1]],68,26],6,65],[[[64,[-1]],68,26],6,65],[[[64,[-1]],[4,[68]],26],6,65],[[[64,[-1]]],6,65],[[69,69],2],[[69,69],2],[[69,69],2],[[91,91],2],[[88,88],2],[[76,76],2],[[78,78],2],[[87,87],2],[[66,66],2],[[93,93],2],[[86,86],2],[[95,95],2],[[69,69],2],[[84,84],2],[[97,97],2],[[81,81],2],[[70,70],2],[[90,90],2],[[68,68],2],[[79,79],2],[[77,77],2],[[98,98],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[80,[-1]]],[[4,[[6,[108,92]]]]],73],[[],70],[[],70],[69,[[24,[85]]]],[[[72,[-1]]],67,73],[26,68],[26,79],0,[[91,21],22],[[88,21],[[31,[6,109]]]],[[76,21],22],[[78,21],22],[[87,21],[[31,[6,109]]]],[[66,21],[[31,[6,109]]]],[[93,21],22],[[94,21],22],[[86,21],[[31,[6,109]]]],[[95,21],22],[[67,21],22],[[96,21],22],[[69,21],22],[[69,21],22],[[84,21],22],[[97,21],22],[[81,21],22],[[81,21],22],[[70,21],22],[[90,21],22],[[68,21],22],[[79,21],22],[[77,21],22],[[98,21],22],[[[102,[-1]],21],22,[47,65]],[[12,[102,[-1]]],[[106,[74]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[33,32],110],[[85,85],93],[80,[[82,[-1,-2]]],65,[[83,[-1]]]],[68,77],[77,98],[5,[[31,[81]]]],[79,77],[[[64,[-1]]],12,65],[[[80,[-1]]],[[4,[[111,[-1]]]]],73],[[[80,[-1]]],[[4,[[111,[-1]]]]],73],[[-1,15],6,[]],[[-1,15],6,[]],[[91,-1],6,50],[[88,-1],6,50],[[76,-1],6,50],[[78,-1],6,50],[[87,-1],6,50],[[66,-1],6,50],[[93,-1],6,50],[[86,-1],6,50],[[95,-1],6,50],[[69,-1],6,50],[[84,-1],6,50],[[97,-1],6,50],[[81,-1],6,50],[[70,-1],6,50],[[68,-1],6,50],[[79,-1],6,50],[[77,-1],6,50],[[98,-1],6,50],0,[68,26],[79,26],[[],70],[[],70],[[],70],[[],70],[68,26],[79,26],[[],68],[[[102,[-1]]],68,65],[26,68],[26,79],0,[101,[[0,[27]]]],[[67,68],[[4,[69]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[-1,2,[]],[[[64,[-1]],25],2,65],[-1,2,[]],[-1,2,[]],[77,2],[88,2],[87,2],[66,2],[93,2],[86,2],[-1,2,[]],[69,2],[-1,2,[]],[-1,2,[]],[77,2],[88,26],[87,26],[66,26],[86,26],[68,26],[79,26],[77,26],[98,26],[26,88],[26,87],[26,66],[26,86],[26,68],[26,79],[26,77],[26,98],[[101,77],[[24,[77]]]],[69,85],[[[102,[-1]],33],70,65],[94,[[102,[103]]]],[[26,91,68],-1,[]],[[-1,25,112,74,[64,[-2]]],6,[],[]],[[[102,[-1]],1],80,65],[[-1,113,[24,[98]],[114,[-2]]],6,[],[]],[[-1,115,[24,[98]],[114,[-2]]],6,[],[]],[[-1,34,98,[116,[-2]]],6,[],[]],[[-1,117,[116,[-2]]],6,[],[]],[[],[[102,[103]]]],0,[[96,86],[[4,[[6,[77,68]]]]]],[[[64,[-1]],25,25],6,65],[[[64,[-1]],34],[[24,[77]]],65],[-1,118,[]],[[[64,[-1]],8],87,65],0,[[[72,[-1]]],108,73],[[],-1,[]],[[[102,[-1]]],[[119,[-1]]],65],[[120,[15,[[6,[108,92]]]],[15,[[111,[-1]]]]],[[80,[-1]]],73],[[[102,[-1]]],105,65],[[[102,[-1]],1],[[64,[-1]]],65],[[[102,[-1]],12],[[106,[74]]],65],[[[121,[-1]]],24,27],[[[64,[-1]],90],77,65],[80,[[15,[122]]]],[[[82,[-1,-2]]],[[15,[122]]],65,[[83,[-1]]]],[[110,26],26],[86,85],0,[[[102,[-1]]],94,65],0,[[69,69],2],[[110,26],26],[[91,91],[[24,[99]]]],[[88,88],[[24,[99]]]],[[76,76],[[24,[99]]]],[[78,78],[[24,[99]]]],[[87,87],[[24,[99]]]],[[66,66],[[24,[99]]]],[[93,93],[[24,[99]]]],[[86,86],[[24,[99]]]],[[95,95],[[24,[99]]]],[[69,69],[[24,[99]]]],[[84,84],[[24,[99]]]],[[97,97],[[24,[99]]]],[[81,81],[[24,[99]]]],[[70,70],[[24,[99]]]],[[90,90],[[24,[99]]]],[[68,68],[[24,[99]]]],[[79,79],[[24,[99]]]],[[77,77],[[24,[99]]]],[[98,98],[[24,[99]]]],0,[[],[[4,[68]]]],[[[102,[-1]]],[[4,[68]]],65],[[[102,[-1]],1],6,65],[[[64,[-1]],12],[[6,[108,[40,[87,93]]]]],65],0,[[-1,68],6,[]],[[[72,[-1]]],[[4,[87]]],73],[[[72,[-1]]],[[4,[87]]],73],[-1,[[121,[-1]]],[]],[-1,[[121,[-1]]],[]],[69,[[0,[27]]]],[[],70],[[[64,[-1]],23],108,65],[[-1,89],88,[]],[-1,123,[]],[[101,77],[[4,[85]]]],[[],88],[[],87],[[],66],[[],93],[[],86],[[[64,[-1]],5],108,65],[[[64,[-1]],34,90],77,65],[-1,[[4,[68]]],[]],[[-1,[4,[[6,[77,68]]]],74],-1,[]],[[124,72,74],6],[[[72,[-1]],[15,[-1]],[35,[87,93]]],6,73],[[[119,[-1]],1,30],125,65],[[[4,[34]],[4,[34]],112],[[15,[[6,[84,84]]]]]],[[88,-1],31,54],[[87,-1],31,54],[[66,-1],31,54],[[86,-1],31,54],[[68,-1],31,54],[[79,-1],31,54],[70,71],[85,69],[[-1,26],91,[]],0,[-1,26,[]],[[-1,126,[116,[-2]]],91,[],[]],[[101,77],[[24,[77]]]],[[69,69],2],[[69,69],2],[[26,68,91],-1,[]],[[[80,[-1]]],120,73],[[[64,[-1]]],[[40,[66]]],65],[[[64,[-1]]],15,65],[[101,77],[[11,[[10,[85]]]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,77],[-1,3,[]],[-1,3,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,[[-1,74,107],6,[]],0,[[34,112],90],0,[94,[[102,[103]]]],[75,124],[[90,26],68],[[90,26],79],0,[[1,[102,[103]]],[[82,[103,127]]]],[[1,[102,[103]]],[[82,[103,127]]]],[[1,[102,[103]]],[[82,[103,127]]]],0,0,0,0,0,0,[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[-1,-2,[],[]],[-1,-2,[],[]],[[[130,[-1,-2,-3,-4,-5]]],[[130,[-1,-2,-3,-4,-5]]],65,[131,42],[131,42],[131,42],[131,42]],[[-1,-2],6,[],[]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[-1,-1,[]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[132,-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[[133,[71]]],[[0,[[128,[-1]],129]]],65],[71,[[0,[[128,[-1]],129]]],65],[[[133,[134]]],[[0,[[128,[-1]],129]]],65],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[-1,-2,[],[]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[-1,25,[116,[-2]]],6,[],[]],[[[130,[-1,-2,-3,-4,-5]],25,[116,[-1]]],6,65,131,131,131,131],[[-1,34,25,[116,[-2]]],6,[],[]],[[[130,[-1,-2,-3,-4,-5]],34,25,[116,[-1]]],6,65,131,131,131,131],[[25,[116,[-1]],-2],6,65,[[128,[-1]]]],[[34,25,[116,[-1]],-2],6,65,[[128,[-1]]]],[[25,[116,[-1]],-2],2,65,[[128,[-1]]]],[[-1,25,[116,[-2]]],2,[],[]],[[[130,[-1,-2,-3,-4,-5]],25,[116,[-1]]],2,65,131,131,131,131],[[-1,34,25,[116,[-2]]],2,[],[]],[[[130,[-1,-2,-3,-4,-5]],34,25,[116,[-1]]],2,65,131,131,131,131],[[34,25,[116,[-1]],-2],2,65,[[128,[-1]]]],[[25,[116,[-1]],-2],2,65,[[128,[-1]]]],[[34,25,[116,[-1]],-2],2,65,[[128,[-1]]]],[[],[[0,[[128,[-1]],129]]],65],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[-1,-2,[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],[[-2,-3],[[0,[[128,[-1]],129]]],65,[[128,[-1]],129],[[128,[-1]],129]],[[],[[0,[[128,[-1]],129]]],65],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[135,[[24,[76]]]],[135,[[24,[78]]]],[[[80,[135]],81,2],3],[[],70],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[136,88],89],[[137,88],89],[[138,88],89],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[135,135],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[139,139],99],[[140,140],99],[[141,141],99],[[142,142],99],[[143,143],99],[[144,144],99],[[145,145],99],[[146,146],99],[[147,147],99],[[148,148],99],[[149,149],99],[[150,150],99],[[151,151],99],[[152,152],99],[[153,153],99],[[154,154],99],[[155,155],99],[[156,156],99],[[157,157],99],[[158,158],99],[[159,159],99],[[160,160],99],[[161,161],99],[[162,162],99],[[163,163],99],[[164,164],99],[[165,165],99],[[166,166],99],[[167,167],99],[[168,168],99],[[169,169],99],[[170,170],99],[[171,171],99],[[172,172],99],[[173,173],99],[[174,174],99],[[175,175],99],[[176,176],99],[[177,177],99],[[178,178],99],[[179,179],99],[[180,180],99],[[181,181],99],[[182,182],99],[[183,183],99],[[184,184],99],[[135,135],99],0,0,[[26,77,98],135],[[],97],[[],103],[185,105],[186,105],[187,105],[188,105],[[185,12,[102,[103]]],[[106,[74]]]],[[186,12,[102,[103]]],[[106,[74]]]],[[187,12,[102,[103]]],[[106,[74]]]],[[188,12,[102,[103]]],[[106,[74]]]],[[135,74,107],6],0,0,0,0,0,0,0,0,0,0,0,[142,26],[142,26],[142,143],0,0,[[139,139],2],[[140,140],2],[[141,141],2],[[142,142],2],[[143,143],2],[[144,144],2],[[145,145],2],[[146,146],2],[[147,147],2],[[148,148],2],[[149,149],2],[[150,150],2],[[151,151],2],[[152,152],2],[[153,153],2],[[154,154],2],[[155,155],2],[[156,156],2],[[157,157],2],[[158,158],2],[[159,159],2],[[160,160],2],[[161,161],2],[[162,162],2],[[163,163],2],[[164,164],2],[[165,165],2],[[166,166],2],[[167,167],2],[[168,168],2],[[169,169],2],[[170,170],2],[[171,171],2],[[172,172],2],[[173,173],2],[[174,174],2],[[175,175],2],[[176,176],2],[[177,177],2],[[178,178],2],[[179,179],2],[[180,180],2],[[181,181],2],[[182,182],2],[[183,183],2],[[184,184],2],[[135,135],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[145,[[6,[144,134]]]],[[],70],[[],70],[[140,21],22],[[141,21],22],[[142,21],22],[[143,21],22],[[144,21],22],[[145,21],22],[[146,21],22],[[147,21],22],[[148,21],22],[[149,21],22],[[150,21],22],[[151,21],22],[[152,21],22],[[153,21],22],[[154,21],22],[[155,21],22],[[156,21],22],[[157,21],22],[[158,21],22],[[159,21],22],[[160,21],22],[[161,21],22],[[162,21],22],[[163,21],22],[[164,21],22],[[165,21],22],[[166,21],22],[[167,21],22],[[168,21],22],[[169,21],22],[[170,21],22],[[171,21],22],[[172,21],22],[[173,21],22],[[174,21],22],[[175,21],22],[[176,21],22],[[177,21],22],[[178,21],22],[[179,21],22],[[180,21],22],[[181,21],22],[[182,21],22],[[183,21],22],[[184,21],22],[[135,21],22],[[185,21],22],[[186,21],22],[[187,21],22],[[188,21],22],0,0,0,0,[[77,143,140],3],[[12,[102,[103]]],[[106,[74]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[143,142],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[149,147],[-1,-1,[]],[148,147],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[26,26],142],[[26,26],142],[26,143],[5,[[31,[140]]]],[5,[[31,[141]]]],[[143,143],142],0,0,[[136,[15,[135]]],6],[[137,[15,[135]]],6],[[138,[15,[135]]],6],[[136,[15,[135]]],6],[[137,[15,[135]]],6],[[138,[15,[135]]],6],[[139,-1],6,50],[[140,-1],6,50],[[141,-1],6,50],[[142,-1],6,50],[[143,-1],6,50],[[144,-1],6,50],[[145,-1],6,50],[[146,-1],6,50],[[147,-1],6,50],[[148,-1],6,50],[[149,-1],6,50],[[150,-1],6,50],[[151,-1],6,50],[[152,-1],6,50],[[153,-1],6,50],[[154,-1],6,50],[[155,-1],6,50],[[156,-1],6,50],[[157,-1],6,50],[[158,-1],6,50],[[159,-1],6,50],[[160,-1],6,50],[[161,-1],6,50],[[162,-1],6,50],[[163,-1],6,50],[[164,-1],6,50],[[165,-1],6,50],[[166,-1],6,50],[[167,-1],6,50],[[168,-1],6,50],[[169,-1],6,50],[[170,-1],6,50],[[171,-1],6,50],[[172,-1],6,50],[[173,-1],6,50],[[174,-1],6,50],[[175,-1],6,50],[[176,-1],6,50],[[177,-1],6,50],[[178,-1],6,50],[[179,-1],6,50],[[180,-1],6,50],[[181,-1],6,50],[[182,-1],6,50],[[183,-1],6,50],[[184,-1],6,50],[[135,-1],6,50],[[],70],[[],70],[[],70],[[],70],0,0,[[],68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[143,26],[135,2],[135,2],0,0,0,0,0,0,[[26,91,68],135],[[189,25,112,74,[64,[103]]],6],[[190,113,[24,[98]],[114,[103]]],6],[[191,113,[24,[98]],[114,[103]]],6],[[190,115,[24,[98]],[114,[103]]],6],[[191,115,[24,[98]],[114,[103]]],6],[[136,34,98,[116,[103]]],6],[[137,34,98,[116,[103]]],6],[[138,34,98,[116,[103]]],6],[[136,117,[116,[103]]],6],[[137,117,[116,[103]]],6],[[138,117,[116,[103]]],6],[136,118],[137,118],[138,118],[[],189],[[144,134],145],[[[80,[135]]],[[15,[122]]]],[145,134],0,0,[[139,139],[[24,[99]]]],[[140,140],[[24,[99]]]],[[141,141],[[24,[99]]]],[[142,142],[[24,[99]]]],[[143,143],[[24,[99]]]],[[144,144],[[24,[99]]]],[[145,145],[[24,[99]]]],[[146,146],[[24,[99]]]],[[147,147],[[24,[99]]]],[[148,148],[[24,[99]]]],[[149,149],[[24,[99]]]],[[150,150],[[24,[99]]]],[[151,151],[[24,[99]]]],[[152,152],[[24,[99]]]],[[153,153],[[24,[99]]]],[[154,154],[[24,[99]]]],[[155,155],[[24,[99]]]],[[156,156],[[24,[99]]]],[[157,157],[[24,[99]]]],[[158,158],[[24,[99]]]],[[159,159],[[24,[99]]]],[[160,160],[[24,[99]]]],[[161,161],[[24,[99]]]],[[162,162],[[24,[99]]]],[[163,163],[[24,[99]]]],[[164,164],[[24,[99]]]],[[165,165],[[24,[99]]]],[[166,166],[[24,[99]]]],[[167,167],[[24,[99]]]],[[168,168],[[24,[99]]]],[[169,169],[[24,[99]]]],[[170,170],[[24,[99]]]],[[171,171],[[24,[99]]]],[[172,172],[[24,[99]]]],[[173,173],[[24,[99]]]],[[174,174],[[24,[99]]]],[[175,175],[[24,[99]]]],[[176,176],[[24,[99]]]],[[177,177],[[24,[99]]]],[[178,178],[[24,[99]]]],[[179,179],[[24,[99]]]],[[180,180],[[24,[99]]]],[[181,181],[[24,[99]]]],[[182,182],[[24,[99]]]],[[183,183],[[24,[99]]]],[[184,184],[[24,[99]]]],[[135,135],[[24,[99]]]],[[],[[4,[68]]]],[[136,68],6],[[137,68],6],[[138,68],6],[[],70],0,0,[[136,89],88],[[137,89],88],[[138,89],88],[136,123],[137,123],[138,123],[136,[[4,[68]]]],[137,[[4,[68]]]],[138,[[4,[68]]]],[[135,[4,[[6,[77,68]]]],74],135],0,0,0,0,0,0,[145,144],[[136,26],91],[[137,26],91],[[138,26],91],0,0,0,0,0,0,0,0,[142,26],[142,26],[142,143],[[134,26],146],[136,26],[137,26],[138,26],[[136,126,[116,[103]]],91],[[137,126,[116,[103]]],91],[[138,126,[116,[103]]],91],[[26,68,91],135],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[135,74,107],6],0,0,[[189,192,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,195,[114,[103]]],6],[[189,196,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,113,[114,[103]]],6],[[189,198,[114,[103]]],6],[[189,199,[114,[103]]],6],[[189,200,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,201,[114,[103]]],6],[[189,202,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,203,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,204,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,205,[114,[103]]],6],[[189,206,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,115,[114,[103]]],6],[[189,207,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,208,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,209,[114,[103]]],6],[[189,210,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,117,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,211,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,212,[114,[103]]],6],[[189,213,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,197,[114,[103]]],6],[[189,214,[114,[103]]],6],[[189,215,[114,[103]]],6],[[189,194,[114,[103]]],6],[[189,193,[114,[103]]],6],[[189,197,[114,[103]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[136,137],[26,68],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[4,[34]]],[]],[-1,[[4,[34]]],[]],[-1,[[4,[34]]],[]],[-1,[[4,[34]]],[]],[[216,217],216],[200,34],[207,34],[199,33],[218,[[0,[27]]]],[218,[[41,[34]]]],[192,33],[[-1,33,219],34,[]],[[-1,33,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[220,221],[[222,8],6],[[220,8,33,219],34],[[218,8,33,219],34],[[220,8,219],[[223,[34]]]],[[222,25,8],6],[224,[[4,[34]]]],[113,[[4,[34]]]],[115,[[4,[34]]]],[[32,33,71],33],[[32,33,71],33],[33,[[24,[225]]]],[33,[[24,[226]]]],[33,[[24,[227]]]],[33,[[24,[228]]]],[33,[[24,[229]]]],[33,[[24,[230]]]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[210,34],[199,34],[[-1,2,219],34,[]],[[-1,2,219],34,[]],[[231,231]],[[232,232]],[[231,231],6],[[232,232],6],[[231,231]],[[232,232]],[[231,231],6],[[232,232],6],[[218,8],233],[224,8],[[222,8],[[24,[25]]]],[[222,8],[[24,[25]]]],[[-1,8],108,[]],[[-1,8],108,[]],[[220,8],108],[[222,8],[[24,[8]]]],[[-1,8],[[4,[34]]],[]],[[-1,8],[[4,[34]]],[]],[[220,8],[[4,[34]]]],[[222,8],[[24,[8]]]],[222,234],[[],33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,224,219],25,[]],[[-1,224,219],25,[]],[[-1,25],[[24,[[4,[224]]]]],[]],[[-1,25],[[24,[[4,[224]]]]],[]],[[218,25],[[24,[[4,[224]]]]]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,235,219],[[6,[25,[24,[34]]]]],[]],[216,236],[[221,235,219],[[6,[25,[24,[34]]]]]],[[237,235,219],[[6,[25,[24,[34]]]]]],[[238,235,219],[[6,[25,[24,[34]]]]]],[[-1,235,219],25,[]],[[-1,235,219],25,[]],[[-1,235,219],34,[]],[[-1,235,219],34,[]],[26,231],[231,[[24,[85]]]],[[-1,23,239,[4,[34]],219],25,[]],[[-1,23,239,[4,[34]],219],25,[]],[113,23],[115,34],[236,217],[8,8],[233,233],[240,240],[126,126],[34,34],[25,25],[241,241],[242,242],[218,218],[219,219],[231,231],[232,232],[118,118],[217,217],[239,239],[236,236],[23,23],[112,112],[12,12],[235,235],[224,224],[132,132],[205,205],[243,243],[201,201],[211,211],[196,196],[198,198],[215,215],[117,117],[244,244],[197,197],[203,203],[113,113],[115,115],[192,192],[208,208],[213,213],[210,210],[200,200],[207,207],[199,199],[206,206],[202,202],[195,195],[214,214],[209,209],[212,212],[204,204],[234,234],[245,245],[222,222],[246,246],[247,247],[1,1],[32,32],[226,226],[229,229],[228,228],[248,248],[227,227],[225,225],[230,230],[33,33],[249,249],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[8,8],99],[[233,233],99],[[240,240],99],[[126,126],99],[[34,34],99],[[25,25],99],[[231,231],99],[[232,232],99],[[217,217],99],[[239,239],99],[[236,236],99],[[23,23],99],[[235,235],99],[[224,224],99],[[132,132],99],[[205,205],99],[[243,243],99],[[201,201],99],[[211,211],99],[[196,196],99],[[198,198],99],[[215,215],99],[[117,117],99],[[244,244],99],[[197,197],99],[[203,203],99],[[113,113],99],[[115,115],99],[[192,192],99],[[208,208],99],[[213,213],99],[[210,210],99],[[200,200],99],[[207,207],99],[[199,199],99],[[206,206],99],[[202,202],99],[[195,195],99],[[214,214],99],[[209,209],99],[[212,212],99],[[204,204],99],[[246,246],99],[[226,226],99],[[229,229],99],[[228,228],99],[[248,248],99],[[227,227],99],[[225,225],99],[[230,230],99],[[33,33],99],[[249,249],99],[219,85],[12,[[24,[118]]]],[[-1,34,224,224,219],25,[]],[[-1,34,224,224,219],25,[]],[211,34],[198,34],[235,71],[1,247],[[-1,5],8,[]],[[-1,5],8,[]],[[220,5],8],[[218,108],8],[[-1,5,8],8,[]],[[-1,5,8],8,[]],[[220,5,8],8],[[-1,5,8],8,[]],[[-1,5,8],8,[]],[[220,5,8],8],[[218,235,219],[[6,[25,[24,[34]]]]]],[[220,5,33],126],[[218,108,33],126],[220,247],[12,247],[-1,[[24,[8]]],[]],[-1,[[24,[8]]],[]],[220,8],[-1,[[24,[25]]],[]],[-1,[[24,[25]]],[]],[-1,[[24,[[4,[224]]]]],[]],[-1,[[24,[[4,[224]]]]],[]],[220,23],[-1,[[24,[25]]],[]],[-1,[[24,[25]]],[]],[-1,[[24,[219]]],[]],[-1,[[24,[219]]],[]],[220,236],[-1,-2,[],[]],[[218,34],219],[[1,5,236],23],[-1,112,[]],[250,112],[251,112],[-1,112,[]],[251,112],[[],216],[[],218],[[],112],[[],222],[[],32],[220,23],[[1,23],220],[[1,5,236],220],[12,[[24,[112]]]],[12,[[24,[112]]]],[-1,[[31,[8]]],44],[-1,[[31,[233]]],44],[-1,[[31,[126]]],44],[-1,[[31,[34]]],44],[-1,[[31,[25]]],44],[-1,[[31,[241]]],44],[-1,[[31,[242]]],44],[-1,[[31,[218]]],44],[-1,[[31,[219]]],44],[-1,[[31,[231]]],44],[-1,[[31,[232]]],44],[-1,[[31,[118]]],44],[-1,[[31,[217]]],44],[-1,[[31,[239]]],44],[-1,[[31,[236]]],44],[-1,[[31,[23]]],44],[-1,[[31,[112]]],44],[-1,[[31,[12]]],44],[-1,[[31,[235]]],44],[-1,[[31,[224]]],44],[-1,[[31,[132]]],44],[-1,[[31,[205]]],44],[-1,[[31,[243]]],44],[-1,[[31,[201]]],44],[-1,[[31,[211]]],44],[-1,[[31,[196]]],44],[-1,[[31,[198]]],44],[-1,[[31,[215]]],44],[-1,[[31,[117]]],44],[-1,[[31,[244]]],44],[-1,[[31,[197]]],44],[-1,[[31,[203]]],44],[-1,[[31,[113]]],44],[-1,[[31,[115]]],44],[-1,[[31,[192]]],44],[-1,[[31,[208]]],44],[-1,[[31,[213]]],44],[-1,[[31,[210]]],44],[-1,[[31,[200]]],44],[-1,[[31,[207]]],44],[-1,[[31,[199]]],44],[-1,[[31,[206]]],44],[-1,[[31,[202]]],44],[-1,[[31,[195]]],44],[-1,[[31,[214]]],44],[-1,[[31,[209]]],44],[-1,[[31,[212]]],44],[-1,[[31,[204]]],44],[-1,[[31,[222]]],44],[-1,[[31,[246]]],44],[-1,[[31,[247]]],44],[-1,[[31,[1]]],44],[-1,[[31,[32]]],44],[-1,[[31,[226]]],44],[-1,[[31,[229]]],44],[-1,[[31,[228]]],44],[-1,[[31,[248]]],44],[-1,[[31,[227]]],44],[-1,[[31,[225]]],44],[-1,[[31,[230]]],44],[-1,[[31,[33]]],44],[-1,[[31,[249]]],44],[-1,218,[]],[221,218],[-1,218,[]],[-1,218,[]],[237,218],[238,218],[220,218],0,[[-1,112],6,[]],[[-1,112],6,[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[-1,6,[]],[-1,6,[]],[[-1,25,235,112],6,[]],[[-1,25,235,112],6,[]],[[-1,235,-2],-3,[],[],[]],[[-1,235,-2],-3,[],[],[]],[[-1,8,112],6,[]],[[-1,8,112],6,[]],[[-1,8,-2],6,[],[]],[[-1,8,-2],6,[],[]],[[225,32],33],[[-1,33,34,71,219],34,[]],[[-1,33,34,71,219],34,[]],[-1,[[24,[8]]],[]],[-1,[[24,[8]]],[]],[220,[[24,[8]]]],[222,[[24,[8]]]],[[8,8],2],[[233,233],2],[[240,240],2],[[126,126],2],[[34,34],2],[[25,25],2],[[241,241],2],[[242,242],2],[[219,219],2],[[231,231],2],[[232,232],2],[[118,118],2],[[217,217],2],[[239,239],2],[[236,236],2],[[23,23],2],[[235,235],2],[[224,224],2],[[132,132],2],[[205,205],2],[[243,243],2],[[201,201],2],[[211,211],2],[[196,196],2],[[198,198],2],[[215,215],2],[[117,117],2],[[244,244],2],[[197,197],2],[[203,203],2],[[113,113],2],[[115,115],2],[[192,192],2],[[208,208],2],[[213,213],2],[[210,210],2],[[200,200],2],[[207,207],2],[[199,199],2],[[206,206],2],[[202,202],2],[[195,195],2],[[214,214],2],[[209,209],2],[[212,212],2],[[204,204],2],[[246,246],2],[[226,226],2],[[229,229],2],[[228,228],2],[[248,248],2],[[227,227],2],[[225,225],2],[[230,230],2],[[33,33],2],[[249,249],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,33,34,71,219],34,[]],[[-1,33,34,71,219],34,[]],[[],33],[[],33],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[],219],[198,224],[[-1,243,34,34,219],34,[]],[[-1,243,34,34,219],34,[]],[[-1,33,252,219],34,[]],[[-1,33,252,219],34,[]],[[-1,33,71,219],34,[]],[[-1,33,71,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[219,108],[[220,5],[[24,[8]]]],[[218,108],[[24,[8]]]],[[220,5],[[24,[23]]]],[[1,5],[[24,[23]]]],[248,33],[[8,21],[[31,[6,109]]]],[[233,21],22],[[220,21],22],[[240,21],22],[[126,21],[[31,[6,109]]]],[[34,21],[[31,[6,109]]]],[[25,21],[[31,[6,109]]]],[[241,21],22],[[242,21],22],[[218,21],22],[[219,21],22],[[231,21],22],[[232,21],22],[[118,21],22],[[217,21],22],[[239,21],[[31,[6,109]]]],[[236,21],22],[[23,21],[[31,[6,109]]]],[[112,21],22],[[12,21],22],[[235,21],22],[[224,21],22],[[132,21],22],[[205,21],22],[[243,21],22],[[201,21],22],[[211,21],22],[[196,21],22],[[198,21],22],[[215,21],22],[[117,21],22],[[244,21],22],[[197,21],22],[[203,21],22],[[113,21],22],[[115,21],22],[[192,21],22],[[208,21],22],[[213,21],22],[[210,21],22],[[200,21],22],[[207,21],22],[[199,21],22],[[206,21],22],[[202,21],22],[[195,21],22],[[214,21],22],[[209,21],22],[[212,21],22],[[204,21],22],[[234,21],22],[[245,21],22],[[222,21],22],[[246,21],22],[[247,21],22],[[1,21],22],[[32,21],22],[[226,21],22],[[229,21],22],[[228,21],22],[[248,21],22],[[227,21],22],[[225,21],22],[[230,21],22],[[33,21],22],[[249,21],22],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,219],34,[]],[[-1,34,219],34,[]],[227,248],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[249,33],[-1,-1,[]],[33,249],[-1,-1,[]],[[8,[15,[34]]],224],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[12,23],0,[-1,12,[]],[251,12],[[220,23],12],[[1,23],12],[[220,23],12],[[1,23],12],[1,[[0,[27]]]],[206,71],[[-1,3,219],34,[]],[[-1,3,219],34,[]],[[-1,8],6,[]],[[-1,8],6,[]],[[-1,8],6,[]],[[-1,8],6,[]],[[-1,8],6,[]],[[-1,8],6,[]],[-1,6,[]],[-1,6,[]],[[-1,25],6,[]],[[-1,25],6,[]],[[-1,8],6,[]],[[-1,8],6,[]],0,[-1,2,[]],[-1,2,[]],[[8,-1],6,50],[[233,-1],6,50],[[240,-1],6,50],[[126,-1],6,50],[[34,-1],6,50],[[25,-1],6,50],[[241,-1],6,50],[[242,-1],6,50],[[219,-1],6,50],[[231,-1],6,50],[[232,-1],6,50],[[118,-1],6,50],[[217,-1],6,50],[[239,-1],6,50],[[236,-1],6,50],[[23,-1],6,50],[[235,-1],6,50],[[224,-1],6,50],[[132,-1],6,50],[[205,-1],6,50],[[243,-1],6,50],[[201,-1],6,50],[[211,-1],6,50],[[196,-1],6,50],[[198,-1],6,50],[[215,-1],6,50],[[117,-1],6,50],[[244,-1],6,50],[[197,-1],6,50],[[203,-1],6,50],[[113,-1],6,50],[[115,-1],6,50],[[192,-1],6,50],[[208,-1],6,50],[[213,-1],6,50],[[210,-1],6,50],[[200,-1],6,50],[[207,-1],6,50],[[199,-1],6,50],[[206,-1],6,50],[[202,-1],6,50],[[195,-1],6,50],[[214,-1],6,50],[[209,-1],6,50],[[212,-1],6,50],[[204,-1],6,50],[[246,-1],6,50],[[226,-1],6,50],[[229,-1],6,50],[[228,-1],6,50],[[248,-1],6,50],[[227,-1],6,50],[[225,-1],6,50],[[230,-1],6,50],[[33,-1],6,50],[[249,-1],6,50],[[],33],[[],33],[[],33],[[],33],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,132,34,34,219],34,[]],[[-1,132,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,33,71,219],34,[]],[[-1,33,71,219],34,[]],[1,246],[211,34],[211,34],[[220,236],239],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[200,71],[207,71],[199,71],[[-1,34,239,[4,[34]],219],25,[]],[[-1,34,239,[4,[34]],219],25,[]],[-1,238,[]],[-1,238,[]],[[-1,34,34,71,219],34,[]],[[-1,34,34,71,219],34,[]],[[222,8,8],6],[[222,8,8],6],[[222,25,25],6],[[222,25,25],6],[[218,236],239],[[1,5],108],[[-1,25],8,[]],[[-1,25],8,[]],[[222,25],8],[[-1,25],235,[]],[[-1,25],235,[]],[[218,25],235],[[-1,25],219,[]],[[-1,25],219,[]],[[218,25],219],[[222,25],[[24,[25]]]],[[222,25],[[24,[25]]]],[[-1,25],[[24,[34]]],[]],[[-1,25],[[24,[34]]],[]],[[220,25],[[24,[34]]]],[[218,25],[[24,[34]]]],[[222,8],245],[85,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,2],[33,2],[[218,8],2],[[222,8],2],[[218,34],2],[33,2],[33,2],[231,2],[-1,2,[]],[205,2],[201,2],[244,2],[235,2],[12,2],[[225,32],2],[[-1,8],2,[]],[[-1,8],2,[]],[[220,8],2],[33,2],[33,2],[33,2],[[33,248],2],[228,2],[33,2],[228,2],[33,2],[228,2],[33,2],[228,2],[33,2],[[218,25],2],[[222,25],2],[33,2],[[33,85],2],0,[231,2],[232,2],[231,2],[232,2],[33,2],[8,2],[126,2],[34,2],[25,2],[239,2],[23,2],[33,2],[[218,126],2],[33,2],[[218,34],2],[236,2],[208,2],[213,2],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,219],34,[]],[[-1,34,219],34,[]],[[-1,34,219],34,[]],[[-1,34,219],34,[]],[8,26],[126,26],[34,26],[25,26],[239,26],[23,26],[26,8],[26,126],[26,34],[26,25],[26,239],[26,23],[-1,222,[]],[-1,222,[]],[220,222],0,[[225,32],71],[222,26],[222,26],[-1,34,[]],[-1,34,[]],[219,85],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[222,25,25],99],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[206,71],[228,71],0,[[230,32],[[4,[33]]]],[-1,1,[]],[233,108],[241,108],[219,[[24,[108]]]],[12,5],[204,5],[1,108],[[],216],[[],218],[[85,85,108],219],[[3,236,23,247],12],[[8,[4,[34]]],224],[[],222],[5,1],[[],32],[234,24],[245,24],[-1,[[24,[8]]],[]],[-1,[[24,[8]]],[]],[-1,[[24,[25]]],[]],[-1,[[24,[25]]],[]],[218,34],[[-1,33,219],34,[]],[[-1,33,219],34,[]],[[-1,33,34,34,219],34,[]],[[-1,33,34,34,219],34,[]],[210,34],[210,33],[205,132],[201,243],[235,[[253,[235]]]],[-1,34,[]],[-1,34,[]],[-1,[[4,[34]]],[]],[[218,34],[[4,[34]]]],[235,[[4,[34]]]],[205,[[4,[34]]]],[201,[[4,[34]]]],[211,[[4,[34]]]],[-1,[[4,[34]]],[]],[-1,[[4,[34]]],[]],[-1,[[4,[34]]],[]],[-1,[[4,[34]]],[]],[244,[[4,[34]]]],[197,[[4,[34]]]],[203,[[4,[34]]]],[113,[[4,[34]]]],[115,[[4,[34]]]],[192,[[4,[34]]]],[208,[[4,[34]]]],[213,[[4,[34]]]],[210,[[4,[34]]]],[200,[[4,[34]]]],[207,[[4,[34]]]],[199,[[4,[34]]]],[206,[[4,[34]]]],[202,[[4,[34]]]],[195,[[4,[34]]]],[214,[[4,[34]]]],[209,[[4,[34]]]],[212,[[4,[34]]]],[204,[[4,[34]]]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[12,250],[12,251],[249,33],[[216,33],216],[[216,33,231],216],[[216,[4,[33]]],216],[233,[[4,[34]]]],[236,[[4,[254]]]],[[216,[4,[[6,[33,231]]]]],216],[[8,8],[[24,[99]]]],[[233,233],[[24,[99]]]],[[240,240],[[24,[99]]]],[[126,126],[[24,[99]]]],[[34,34],[[24,[99]]]],[[25,25],[[24,[99]]]],[[231,231],[[24,[99]]]],[[232,232],[[24,[99]]]],[[217,217],[[24,[99]]]],[[239,239],[[24,[99]]]],[[236,236],[[24,[99]]]],[[23,23],[[24,[99]]]],[[235,235],[[24,[99]]]],[[224,224],[[24,[99]]]],[[132,132],[[24,[99]]]],[[205,205],[[24,[99]]]],[[243,243],[[24,[99]]]],[[201,201],[[24,[99]]]],[[211,211],[[24,[99]]]],[[196,196],[[24,[99]]]],[[198,198],[[24,[99]]]],[[215,215],[[24,[99]]]],[[117,117],[[24,[99]]]],[[244,244],[[24,[99]]]],[[197,197],[[24,[99]]]],[[203,203],[[24,[99]]]],[[113,113],[[24,[99]]]],[[115,115],[[24,[99]]]],[[192,192],[[24,[99]]]],[[208,208],[[24,[99]]]],[[213,213],[[24,[99]]]],[[210,210],[[24,[99]]]],[[200,200],[[24,[99]]]],[[207,207],[[24,[99]]]],[[199,199],[[24,[99]]]],[[206,206],[[24,[99]]]],[[202,202],[[24,[99]]]],[[195,195],[[24,[99]]]],[[214,214],[[24,[99]]]],[[209,209],[[24,[99]]]],[[212,212],[[24,[99]]]],[[204,204],[[24,[99]]]],[[246,246],[[24,[99]]]],[[226,226],[[24,[99]]]],[[229,229],[[24,[99]]]],[[228,228],[[24,[99]]]],[[248,248],[[24,[99]]]],[[227,227],[[24,[99]]]],[[225,225],[[24,[99]]]],[[230,230],[[24,[99]]]],[[33,33],[[24,[99]]]],[[249,249],[[24,[99]]]],[208,34],[213,34],[-1,240,[]],[250,240],[251,240],[-1,[[24,[8]]],[]],[-1,[[24,[8]]],[]],[-1,[[24,[25]]],[]],[-1,[[24,[25]]],[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[],33],[-1,6,[]],[-1,6,[]],[[218,8],6],[[-1,8,34],6,[]],[[-1,8,34],6,[]],[[218,8,34],6],[-1,25,[]],[-1,25,[]],[[222,25],6],[-1,25,[]],[-1,25,[]],[[222,25],2],[[-1,126],6,[]],[[-1,126],6,[]],[[218,126],6],[-1,237,[]],[-1,237,[]],[[-1,25,8,26,34],6,[]],[[-1,25,8,26,34],6,[]],[[218,25,8,26,34],6],[[218,25,235,219],[[6,[25,[24,[34]]]]]],[[-1,34,34],6,[]],[[-1,34,34],6,[]],[[218,34,34],6],[[],8],[[],126],[[],34],[[],25],[[],239],[[],23],[[],33],[[-1,-2],-3,[],[],[]],[-1,[[24,[33]]],[]],[235,[[24,[33]]]],[205,[[24,[33]]]],[201,[[24,[33]]]],[211,[[24,[33]]]],[-1,[[24,[33]]],[]],[-1,[[24,[33]]],[]],[-1,[[24,[33]]],[]],[-1,[[24,[33]]],[]],[244,[[24,[33]]]],[197,[[24,[33]]]],[203,[[24,[33]]]],[113,[[24,[33]]]],[115,[[24,[33]]]],[192,[[24,[33]]]],[208,[[24,[33]]]],[213,[[24,[33]]]],[210,[[24,[33]]]],[200,[[24,[33]]]],[207,[[24,[33]]]],[199,[[24,[33]]]],[206,[[24,[33]]]],[202,[[24,[33]]]],[195,[[24,[33]]]],[214,[[24,[33]]]],[209,[[24,[33]]]],[212,[[24,[33]]]],[204,[[24,[33]]]],[[216,[24,[33]]],216],[[-1,[24,[34]],219],25,[]],[[-1,[24,[34]],219],25,[]],[[-1,34,219],25,[]],[[-1,34,219],25,[]],[[-1,219],25,[]],[[-1,219],25,[]],[[216,255],216],[236,[[24,[232]]]],[236,255],[236,[[24,[33]]]],[12,[[24,[33]]]],[[-1,25,8,[4,[34]]],6,[]],[[-1,25,8,[4,[34]]],6,[]],[[218,25,8,[4,[34]]],6],[[-1,8,224],224,[]],[[-1,8,224],224,[]],[[218,25,8,224],224],[[224,8],224],[-1,34,[]],[-1,34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,34,219],34,[]],[[-1,34,34,34,219],34,[]],[[8,-1],31,54],[[233,-1],31,54],[[126,-1],31,54],[[34,-1],31,54],[[25,-1],31,54],[[241,-1],31,54],[[242,-1],31,54],[[218,-1],31,54],[[219,-1],31,54],[[231,-1],31,54],[[232,-1],31,54],[[118,-1],31,54],[[217,-1],31,54],[[239,-1],31,54],[[236,-1],31,54],[[23,-1],31,54],[[112,-1],31,54],[[12,-1],31,54],[[235,-1],31,54],[[224,-1],31,54],[[132,-1],31,54],[[205,-1],31,54],[[243,-1],31,54],[[201,-1],31,54],[[211,-1],31,54],[[196,-1],31,54],[[198,-1],31,54],[[215,-1],31,54],[[117,-1],31,54],[[244,-1],31,54],[[197,-1],31,54],[[203,-1],31,54],[[113,-1],31,54],[[115,-1],31,54],[[192,-1],31,54],[[208,-1],31,54],[[213,-1],31,54],[[210,-1],31,54],[[200,-1],31,54],[[207,-1],31,54],[[199,-1],31,54],[[206,-1],31,54],[[202,-1],31,54],[[195,-1],31,54],[[214,-1],31,54],[[209,-1],31,54],[[212,-1],31,54],[[204,-1],31,54],[[222,-1],31,54],[[246,-1],31,54],[[247,-1],31,54],[[1,-1],31,54],[[32,-1],31,54],[[226,-1],31,54],[[229,-1],31,54],[[228,-1],31,54],[[248,-1],31,54],[[227,-1],31,54],[[225,-1],31,54],[[230,-1],31,54],[[33,-1],31,54],[[249,-1],31,54],[[-1,240],6,[]],[[250,240],6],[[251,240],6],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[113,239],[115,239],[228,71],[[220,239],236],[[218,239],236],[12,236],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[212,126],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,126],241,[]],[[-1,126],241,[]],[[218,126],241],[218,[[0,[27]]]],[[-1,126,219],34,[]],[[-1,126,219],34,[]],[[-1,34,34,219],25,[]],[[-1,34,34,219],25,[]],[[-1,34,34,219],25,[]],[[-1,34,34,219],25,[]],[213,34],[247,[[256,[120]]]],[247,[[257,[120]]]],[219,219],[[32,[4,[33]]],33],[[32,[4,[33]]],33],[[220,8],6],[196,224],[-1,[[4,[224]]],[]],[196,[[4,[224]]]],[198,[[4,[224]]]],[215,[[4,[224]]]],[117,[[4,[224]]]],[8,224],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[198,224],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[-1,34],33,[]],[[-1,34],33,[]],[[220,34],33],[241,33],[[218,34],33],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[1,[[256,[32]]]],[1,[[257,[32]]]],[247,[[256,[32]]]],[247,[[257,[32]]]],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,219],34,[]],[[-1,33,219],34,[]],[33,249],[[-1,219],25,[]],[[-1,219],25,[]],[33,225],[33,226],[33,227],[33,228],[33,229],[33,230],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[218,34],[[4,[25]]]],[[-1,34],219,[]],[[-1,34],219,[]],[117,[[24,[34]]]],[207,34],[206,71],[202,71],[195,2],[[-1,34],242,[]],[[-1,34],242,[]],[[218,34],242],[[-1,34],[[24,[25]]],[]],[[-1,34],[[24,[25]]],[]],[[218,34],[[24,[25]]]],[[216,2],216],[236,2],[[-1,25,192,112],6,[]],[[-1,192,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,195,112],6,[]],[[-1,195,-2],-3,[],[],[]],[[-1,8,112],6,[]],[[-1,8,112],6,[]],[[-1,8,-2],6,[],[]],[[-1,8,-2],6,[],[]],[[-1,25,196,112],6,[]],[[-1,196,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,113,112],6,[]],[[-1,113,-2],-3,[],[],[]],[[-1,25,198,112],6,[]],[[-1,198,-2],-3,[],[],[]],[[-1,25,199,112],6,[]],[[-1,199,-2],-3,[],[],[]],[[-1,25,200,112],6,[]],[[-1,200,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,201,112],6,[]],[[-1,201,-2],-3,[],[],[]],[[-1,25,202,112],6,[]],[[-1,202,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,203,112],6,[]],[[-1,203,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,23],6,[]],[[-1,23],6,[]],[[-1,25,204,112],6,[]],[[-1,204,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,205,112],6,[]],[[-1,205,-2],-3,[],[],[]],[[-1,25,206,112],6,[]],[[-1,206,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,115,112],6,[]],[[-1,115,-2],-3,[],[],[]],[[-1,25,207,112],6,[]],[[-1,207,-2],-3,[],[],[]],[[-1,25,112],6,[]],[[-1,25,112],6,[]],[[-1,25,-2],-3,[],[],[]],[[-1,25,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,208,112],6,[]],[[-1,208,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,209,112],6,[]],[[-1,209,-2],-3,[],[],[]],[[-1,25,210,112],6,[]],[[-1,210,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,117,112],6,[]],[[-1,117,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,211,112],6,[]],[[-1,211,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,212,112],6,[]],[[-1,212,-2],-3,[],[],[]],[[-1,25,213,112],6,[]],[[-1,213,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[[-1,25,214,112],6,[]],[[-1,214,-2],-3,[],[],[]],[[-1,25,215,112],6,[]],[[-1,215,-2],-3,[],[],[]],[[-1,25,194,112],6,[]],[[-1,194,-2],-3,[],[],[]],[[-1,25,193,112],6,[]],[[-1,193,-2],-3,[],[],[]],[[-1,25,197,112],6,[]],[[-1,197,-2],-3,[],[],[]],[-1,6,[]],[-1,6,[]],[[-1,-2],-3,[],[],[]],[[-1,-2],-3,[],[],[]],[228,85],[[108,85,85,108],219],[[-1,34,34,219],34,[]],[[-1,34,34,219],34,[]],[[-1,33,34,219],34,[]],[[-1,33,34,219],34,[]],0,0,0,[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[2,[[0,[258]]]],[[[24,[259]]],[[0,[258]]]],[[[24,[259]],-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[33,[[0,[258]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[33,[[0,[258]]]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[-1,-1,[]],[-1,-1,[]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[33,[[0,[258]]]],[[33,71],[[0,[258]]]],[71,[[0,[258]]]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[34,-1,218],2,258],[[25,-1,218],2,258],[[-1,25,218],2,[]],[[[260,[-1]],25,218],2,261],[[[262,[-1]],25,218],2,261],[[-1,34,218],2,[]],[[[260,[-1]],34,218],2,261],[[[262,[-1]],34,218],2,261],[[],[[0,[258]]]],[[],[[0,[258]]]],[[],[[0,[258]]]],[[],[[0,[258]]]],[33,[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],[[],[[0,[258]]]],[33,[[0,[258]]]],[[],[[0,[258]]]],[[-1,-2],[[0,[258]]],258,258],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,263,264],[[29,-1],6,265],[[30,-1],6,266],[[267,-1],6,268],[[269,-1],6,264],[[],125],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],29],[[],30],[[],267],[[],269],[-1,[[4,[17]]],[]],[-1,[[4,[17]]],[]],[270,[[4,[17]]]],[[125,21],22],[[29,21],22],[[30,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[29,12],271],[[30,1],271],[[29,12],6],[[30,1],6],[[125,125],125],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,1,125],6,[]],[[-1,1,125],6,[]],[[-1,12,125],6,[]],[[-1,12,125],6,[]],[[270,1,125],6],[[29,12,125],6],[[30,1,125],6],[[125,17],2],[[],29],[[],30],[[],267],[[],269],[[],125],[125,6],[125,2],[[-1,1,30],[],[]],[[-1,12,29],[],[]],[[-1,1,30],125,[]],[[-1,12,29],125,[]],[[270,1,30]],[[263,1,30],125],[[267,1,30],125],[[269,12,29],125],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[29,270],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[272,[[24,[273]]]],[272,[[24,[274]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[275,275],[276,276],[274,274],[273,273],[272,272],[277,277],[278,278],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[275,275],2],[[276,276],2],[[274,274],2],[[273,273],2],[[272,272],2],[[277,277],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[275,21],22],[[276,21],22],[[274,21],22],[[273,21],22],[[272,21],22],[[277,21],22],[[278,21],22],[[278,21],22],[[5,5,278],3],[[5,5,[15,[[6,[3,219]]]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[275,-1],6,50],[[276,-1],6,50],[[274,-1],6,50],[[273,-1],6,50],[[272,-1],6,50],[[277,-1],6,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[279,2],0,0,[5,279],[[5,5],280],[279,[[24,[277]]]],0,[280,[[281,[1]]]],[[5,5],[[31,[1,3]]]],[279,[[24,[277]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,3,[]],0,[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,0,0,0,0,0,0,0,0,0,[[12,13,9],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[12,9],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[12,13,9,14],6],[[282,12,29],125],[[283,12,29],125],[[284,12,29],125],[[285,12,29],125],[[286,12,29],125],[[287,1,30],125],[[288,12,29],125],[[289,12,29],125],[[290,12,29],125],[[291,1,30],125],[[12,13],6],[[],286],[[],287],[[],286],[[],287],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[1,[[31,[6,[15,[[6,[3,219]]]]]]]],[1,6],[-1,286,292],[-1,287,292],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[218,25],2],[-1,-2,[],[]],[[251,13,8,34],6],[[251,25,8,26,34],6],[[25,235,251],2],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[[293,192,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,195,6],[[24,[6]]]],[[293,196,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,113,6],[[24,[6]]]],[[293,198,6],[[24,[6]]]],[[293,199,6],[[24,[6]]]],[[293,200,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,201,6],[[24,[6]]]],[[293,202,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,203,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,204,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,205,6],[[24,[6]]]],[[293,206,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,115,6],[[24,[6]]]],[[293,207,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,208,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,209,6],[[24,[6]]]],[[293,210,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,117,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,211,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,212,6],[[24,[6]]]],[[293,213,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],[[293,214,6],[[24,[6]]]],[[293,215,6],[[24,[6]]]],[[293,194,6],[[24,[6]]]],[[293,193,6],[[24,[6]]]],[[293,197,6],[[24,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[294,[-1]],-2],[[24,[-3]]],295,261,[]],[[[294,[-1]],-2],[[294,[-3]]],295,261,295],[[[223,[-1]]],[[4,[-1]]],[]],[[[223,[-1]]],[[4,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[223,[-1]]],[[4,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[223,[-1]]],[[4,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[10]]],[]],[[[223,[-1]]],[[223,[-1]]],42],[[[294,[-1]]],[[294,[-1]]],[42,295]],[108,108],[120,120],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[223,[-1]],[223,[-1]]],99,296],[[[294,[-1]],[294,[-1]]],99,[296,295]],[[108,108],99],[[],[[294,[-1]]],295],[[],120],[[[223,[-1]]],[],[]],[[[223,[-1]]],[],[]],[-1,[[31,[[223,[-2]]]]],44,45],[-1,[[31,[[294,[-2]]]]],44,[45,295]],[-1,[[31,[108]]],44],[-1,[[31,[120]]],44],[[[223,[-1]]],6,[]],[[[223,[-2]],[223,[-1]]],2,[],[[46,[-1]]]],[[[294,[-1]],[294,[-1]]],2,[46,295]],[[108,108],2],[[120,120],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[294,[-1]]],[[24,[-1]]],295],[[[294,[-1]]],[[24,[-1]]],295],[[[294,[-1]],5],-1,295],[[[223,[-1]],21],22,47],[[[294,[-1]],21],22,[295,47]],[[108,21],22],[[120,21],22],[[[297,[-1]],21],22,47],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[-1]]],[[294,[-1]]],295],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[-1]]],[[223,[-1]]],[]],[-1,[[223,[-2]]],49,[]],[[[4,[-1]]],[[223,[-1]]],42],[[[11,[[10,[-1]]]]],[[223,[-1]]],[]],[[[15,[-1]]],[[223,[-1]]],[]],[[120,108],[[24,[5]]]],[[[223,[-1]],-2],6,38,50],[[[294,[-1]],-2],6,[38,295],50],[[108,-1],6,50],[[120,108]],[[120,5],108],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[223,[-1]]],[],[]],[-1,-2,[],[]],[[[223,[-1]]],2,[]],[120,2],[[[223,[-1]]],2,[]],[[[294,[-1]]],2,295],[-1,2,[]],[108,2],[[[294,[-1]]],2,295],[[[223,[-1]]],2,[]],[[[223,[-1]]],[[0,[27]]],[]],[[[223,[-1]]],[[0,[27]]],[]],[[[223,[-1]]],26,[]],[120,26],[298,6],[299,6],[[[294,[-1]],-2],[[24,[-3]]],295,261,[]],[[],298],[[],299],[[],120],[[[297,[-1]]],24,[]],[[[297,[-1]]],24,[]],[[],[[294,[-1]]],295],[[[223,[-1]],[223,[-1]]],[[24,[99]]],300],[[[294,[-1]],[294,[-1]]],[[24,[99]]],[300,295]],[[108,108],[[24,[99]]]],[[[294,[-1]],-1],[[24,[-1]]],295],[[],-1,[]],[[],108],[-1,[],[]],[[[223,[-1]],-2],31,53,54],[[[294,[-1]],-2],31,[53,295],54],[[108,-1],31,54],[[120,-1],31,54],[[26,26],[[0,[27]]]],[[[297,[-1]]],[[6,[26,[24,[26]]]]],[]],[-1,[[294,[-1]]],295],[[-1,-2],3,301,52],[[[294,[-1]]],[[24,[-1]]],295],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[298,6],[299,6],[[[294,[-1]]],-1,295],[120,[[0,[27]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,6],[5,[[24,[302]]]],[[[4,[5]]],134],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[1,-1,[]]],"c":[],"p":[[3,"Module",2518],[15,"bool"],[3,"String",5474],[15,"slice"],[15,"str"],[15,"tuple"],[3,"ModuleWriter",15],[3,"Block",2518],[3,"DominatorTree",15],[15,"array"],[3,"SmallVec",5475],[3,"Function",2518],[3,"ControlFlowGraph",15],[3,"DominanceFrontier",15],[3,"Vec",5476],[3,"DominatorTreeAnalysis",15],[3,"TypeId",5477],[3,"DominanceFrontierAnalysis",15],[3,"ControlFlowGraphAnalysis",15],[3,"ModuleStringifyAnalysis",15],[3,"Formatter",5478],[6,"Result",5478],[3,"Func",2518],[4,"Option",5479],[3,"Inst",2518],[15,"usize"],[8,"Iterator",5480],[8,"ExactSizeIterator",5481],[3,"FunctionAnalysisManager",4727],[3,"ModuleAnalysisManager",4727],[4,"Result",5482],[3,"TypePool",2518],[3,"Type",2518],[3,"Value",2518],[3,"SecondaryMap",121],[8,"ArenaKey",121],[3,"UniqueArenaMap",121],[8,"Hash",5483],[8,"Eq",5484],[3,"ArenaMap",121],[3,"SecondarySet",121],[8,"Clone",5485],[3,"Keys",121],[8,"Deserializer",5486],[8,"Deserialize",5486],[8,"PartialEq",5484],[8,"Debug",5478],[3,"IntoIter",121],[8,"IntoIterator",5487],[8,"Hasher",5483],[8,"DoubleEndedIterator",5488],[8,"FnMut",5489],[8,"Serialize",5490],[8,"Serializer",5490],[3,"Iter",5491],[3,"IterMut",5491],[4,"MachineFormat",306],[4,"IRFormat",306],[3,"BaseOptions",306],[8,"Parser",5492],[4,"FramePointer",306],[3,"PathBuf",5493],[3,"OptionParser",5494],[3,"LoweringContext",372],[8,"Architecture",372],[3,"MIRFuncData",372],[3,"FixedIntervals",372],[3,"PReg",372],[3,"LiveInterval",372],[3,"TypeLayout",372],[15,"u64"],[3,"MIRFunction",372],[8,"MachInst",372],[8,"StackFrame",372],[3,"Allocation",372],[3,"RegToRegCopy",372],[3,"Reg",372],[3,"UnconditionalBranch",372],[3,"VReg",372],[3,"MIRModule",372],[4,"TargetPair",372],[3,"Backend",372],[8,"Emitter",372],[4,"ParallelCopyLocation",372],[15,"u32"],[3,"ProgramPoint",372],[3,"MIRBlock",372],[3,"CallUseDefId",372],[3,"CallUseDef",372],[4,"RegClass",372],[4,"VariableLocation",372],[4,"Extern",372],[3,"MIRBlockInterval",372],[3,"CodegenOptions",372],[4,"SpillReload",372],[3,"RegisterMapping",372],[4,"CPUArch",372],[3,"WriteableReg",372],[4,"Ordering",5484],[3,"LiveRanges",372],[3,"ConservativeLiveIntervals",372],[3,"Target",372],[3,"X86_64",1256],[3,"StackRegAlloc",372],[8,"CallingConv",372],[3,"Box",5495],[6,"RegCollector",372],[3,"Str",5274],[3,"Error",5478],[3,"AggregateLayout",372],[6,"FuncFramePair",372],[3,"FunctionDefinition",2518],[3,"CallInst",2518],[6,"Ctx",372],[3,"IndirectCallInst",2518],[6,"FramelessCtx",372],[3,"RetInst",2518],[3,"FunctionMetadata",2518],[3,"LegalizeAggregatesForABI",372],[3,"StringPool",5274],[3,"ProgramPoints",372],[15,"u8"],[3,"AvailableRegisters",372],[3,"Rewriter",372],[3,"PreservedAnalyses",4727],[3,"StackSlot",2518],[3,"Emit",1256],[8,"ISelMergeMatcher",1183],[8,"Copy",5496],[3,"BasicISelMergeMatcher",1183],[8,"Fn",5489],[4,"ICmpOp",2518],[3,"RefCell",5497],[15,"i32"],[4,"Inst",1256],[3,"SystemVStackFrame",1256],[3,"Debug3RegStackFrame",1256],[3,"WindowsX64StackFrame",1256],[4,"Constant",1256],[4,"X86_64Assembly",1256],[4,"X86_64ObjectFile",1256],[3,"WidthPair",1256],[4,"Width",1256],[4,"Scale",1256],[3,"ScaleAnd30BitOffset",1256],[4,"IndirectAddress",1256],[4,"RegMemImm",1256],[4,"RegMem",1256],[4,"RegImm",1256],[3,"Nop",1256],[3,"Lea",1256],[3,"Mov",1256],[3,"MovStore",1256],[3,"Movzx",1256],[3,"Movsx",1256],[3,"Movabs",1256],[3,"Movaps",1256],[3,"MovFloatLoad",1256],[3,"MovFloatStore",1256],[4,"ALUOpcode",1256],[3,"ALU",1256],[3,"Not",1256],[3,"Neg",1256],[3,"IMul",1256],[3,"Cwd",1256],[3,"Cdq",1256],[3,"Cqo",1256],[3,"IDiv",1256],[3,"Div",1256],[3,"PXor",1256],[4,"FloatArithOpcode",1256],[3,"FloatArith",1256],[3,"Cmp",1256],[3,"Test",1256],[4,"ConditionCode",1256],[3,"Set",1256],[4,"JumpTarget",1256],[3,"Jump",1256],[3,"Push",1256],[3,"Pop",1256],[3,"Call",1256],[3,"IndirectCall",1256],[3,"Ret",1256],[3,"Ud2",1256],[3,"LinuxX86_64",1256],[3,"MacOSX86_64",1256],[3,"WindowsX86_64",1256],[3,"Debug3RegLinuxX86_64",1256],[3,"GreedyISel",1256],[3,"SystemVCallingConv",1256],[3,"WindowsX64CallingConv",1256],[3,"AllocaInst",2518],[6,"CommutativeArithInst",2518],[6,"ArithInst",2518],[3,"BConstInst",2518],[3,"BrInst",2518],[3,"CastInst",2518],[3,"CondBrInst",2518],[3,"ElemPtrInst",2518],[3,"ExtractInst",2518],[3,"FCmpInst",2518],[3,"FConstInst",2518],[3,"FloatUnaryInst",2518],[3,"GlobalAddrInst",2518],[3,"ICmpInst",2518],[3,"IConstInst",2518],[3,"InsertInst",2518],[3,"LoadInst",2518],[3,"NullConstInst",2518],[3,"OffsetInst",2518],[3,"SelInst",2518],[3,"StackSlotInst",2518],[3,"StoreInst",2518],[3,"UndefConstInst",2518],[3,"UnreachableInst",2518],[3,"SigBuilder",2518],[4,"CallConv",2518],[3,"DataFlowGraph",2518],[3,"DebugInfo",2518],[3,"FuncBuilder",2518],[3,"AppendBuilder",2518],[3,"Layout",2518],[3,"TinyArray",5274],[3,"BlockWithParams",2518],[3,"Array",2518],[3,"Bool",2518],[3,"Float",2518],[3,"Int",2518],[3,"Ptr",2518],[3,"Struct",2518],[3,"ParamAttributes",2518],[3,"RetAttributes",2518],[3,"BasicBlock",2518],[3,"BlockIter",2518],[4,"InstData",2518],[3,"Signature",2518],[3,"ReplaceBuilder",2518],[3,"InsertBuilder",2518],[3,"Sig",2518],[4,"CursorPos",2518],[3,"StackSlotData",2518],[4,"ValueDef",2518],[4,"FCmpOp",2518],[3,"ArithmeticInst",2518],[3,"InstIter",2518],[3,"ModuleIdentity",2518],[3,"ModuleContext",2518],[4,"FloatFormat",2518],[4,"UType",2518],[3,"FuncView",2518],[3,"FuncCursor",2518],[15,"f64"],[3,"Discriminant",5498],[6,"ParamTy",2518],[6,"RetTy",2518],[3,"RwLockReadGuard",5499],[3,"RwLockWriteGuard",5499],[8,"IRMatcher",4637],[8,"BinaryInst",2518],[3,"BasicInstMatcher",4637],[8,"FnOnce",5489],[3,"BasicValMatcher",4637],[3,"FunctionToModulePassAdapter",4727],[8,"FunctionTransformPass",4727],[8,"FunctionAnalysisPass",4727],[8,"ModuleAnalysisPass",4727],[3,"ModulePassManager",4727],[8,"ModuleTransformPass",4727],[3,"FunctionPassManager",4727],[3,"FunctionAnalysisManagerModuleProxy",4727],[3,"Ref",5497],[4,"Token",4836],[4,"FloatLiteral",4836],[4,"IntLiteral",4836],[4,"Opcode",4836],[4,"CompareOpcode",4836],[3,"TokPair",4836],[3,"Error",4836],[3,"Lex",4836],[3,"Parser",4836],[6,"ParseResult",4836],[3,"SplitCriticalEdgesPass",5104],[3,"AggressiveDCEPass",5104],[3,"GVNPass",5104],[3,"Mem2RegPass",5104],[3,"DominatorTreeWriterPass",5104],[3,"ModuleWriterPass",5104],[3,"SCCPPass",5104],[3,"SimplifyCFGPass",5104],[3,"SimplifyInstPass",5104],[3,"VerifyModulePass",5104],[8,"Write",5500],[3,"InPlaceConstantFolder",5207],[3,"PackedOption",5274],[8,"Packable",5274],[8,"Ord",5484],[3,"IntoIter",5274],[3,"SpinMutex",5274],[3,"RawSpinMutex",5274],[8,"PartialOrd",5484],[8,"IntoTree",5274],[4,"GenericForeignValue",5444],[8,"RegisterAllocator",372],[3,"LinearScanRegAlloc",372],[3,"PresetBackends",372],[3,"GenericISel",372],[3,"GraphColoringRegAlloc",372],[3,"PresetTargets",372],[8,"Platform",372],[8,"InstructionSelector",372],[8,"ProgramPointsIterator",372],[13,"Spill",1179],[13,"Reload",1179],[3,"FrameInfo",1256],[8,"InstBuilder",2518],[8,"Cursor",2518],[8,"CursorMut",2518],[8,"FunctionCursorVisitor",2518],[8,"SIRVisitor",2518],[8,"GenericInstVisitor",2518],[8,"Instruction",2518],[8,"UnaryInst",2518],[8,"Terminator",2518],[3,"ThreadPool",5274],[3,"Runtime",5444],[8,"Engine",5444]]},\
"sirc":{"doc":"","t":"AFAFFFFHNNNNEDENNMLLLLLLLLLLMFLLLLFMLLMLLLLLLLMFFFMFMMFLLLLLLLLLLLMMFMF","n":["driver","main","options","compile_single_file","compile_x86_64","driver","run_passes","DESCRIPTION","Debug","Graph","Linear","None","OptLevel","Options","RegAlloc","Release","Stack","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","codegen","default_target","eq","eq","equivalent","equivalent","fixed_intervals","fixed_intervals","fmt","fmt","format","from","from","from","from_str","into","into","into","opt","opt_level","parse_options","print","print","reg_alloc","reg_alloc","target","target_pair","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","x86_64_asm","x86_64_asm_format","x86_64_obj","x86_64_object_format"],"q":[[0,"sirc"],[3,"sirc::driver"],[7,"sirc::options"],[71,"std::io::error"],[72,"core::result"],[73,"sapphire::ir::module"],[74,"sapphire::codegen::target"],[75,"alloc::string"],[76,"core::ops::function"],[77,"bpaf"],[78,"core::fmt"],[79,"core::fmt"],[80,"core::any"],[81,"sapphire::codegen::x86_64::emit"],[82,"sapphire::codegen::x86_64::emit"]],"d":["","","","","","Drives compilation given a list of options","","","Almost all optimizations disabled, codegen is fairly quick","A graph-coloring allocator, much slower than <code>Self::Linear</code> …","A linear-scan allocator, slower than <code>Self::Stack</code> at …","Only used for debug reasons, does not perform register …","The optimization levels that the compiler supports.","The options given by the user, both inferred and explicit.","Which register allocator to use","Optimizations enabled, codegen is slower","The naive stack allocator (spills every value on def and …","The base Sapphire tool options","","","","","","","","","","","Options to pass into the backend","","","","","","","Whether to emit fixed interval comments","","","The format being generated","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The level of optimization to perform","","Parses and infers all options necessary for the compiler.","","Whether to print the output to stdout","","The register allocator to use","The target being generated for","","","","","","","","","","","","","Whether or not to verify the IR","If we’re targeting an x86-64 platform and emitting …","","If we’re targeting an x86-64 platform and emitting …",""],"i":[0,0,0,0,0,0,0,0,11,10,10,10,0,0,0,11,10,4,4,10,11,4,10,11,10,11,10,11,4,0,10,11,10,11,0,4,10,11,4,4,10,11,10,4,10,11,4,0,0,0,4,0,4,4,0,10,11,4,10,11,4,10,11,4,10,11,4,4,0,4,0],"f":[0,[[],[[2,[1]]]],0,[[3,3,4],[[5,[1,1]]]],[[6,7,4],8],[4,[[2,[1]]]],[[6,4,-1,-2],1,9,9],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[11,11],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[[],7],[[10,10],12],[[11,11],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[],[[0,[[13,[12]]]]]],0,[[10,14],15],[[11,14],15],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,[[5,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[0,[[13,[11]]]]]],[[],4],[[],[[0,[[13,[12]]]]]],0,[[],[[0,[[13,[[16,[10]]]]]]]],0,0,[[],[[0,[[13,[[16,[7]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,0,[[],[[0,[[13,[[16,[18]]]]]]]],0,[[],[[0,[[13,[[16,[19]]]]]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",71],[15,"str"],[3,"Options",7],[4,"Result",72],[3,"Module",73],[4,"TargetPair",74],[3,"String",75],[8,"FnOnce",76],[4,"RegAlloc",7],[4,"OptLevel",7],[15,"bool"],[8,"Parser",77],[3,"Formatter",78],[6,"Result",78],[4,"Option",79],[3,"TypeId",80],[4,"X86_64Assembly",81],[4,"X86_64ObjectFile",81]]},\
"siro":{"doc":"","t":"FFF","n":["main","optimize_single_file","parse_options"],"q":[[0,"siro"],[3,"std::io::error"],[4,"sapphire::cli"],[5,"alloc::string"],[6,"core::result"],[7,"alloc::vec"]],"d":["","",""],"i":[0,0,0],"f":[[[],[[2,[1]]]],[[3,4,5,[7,[6]]],[[8,[1,1]]]],[[],[[1,[4,5,[9,[6]]]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",3],[15,"str"],[3,"BaseOptions",4],[15,"bool"],[3,"String",5],[15,"slice"],[4,"Result",6],[3,"Vec",7]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
