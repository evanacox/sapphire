window.SIDEBAR_ITEMS = {"fn":[["aggressive_instruction_dce","Scans over an entire function and removes dead instructions and φ nodes."],["mem2reg","Promotes function-local memory (that doesn’t escape) into φ nodes where possible."],["verify_module","Verifies that an entire module is valid SIR."],["verify_module_panic","This is [`verify_module`], except that it writes out any errors and then panics on failure."]],"mod":[["common","Common utilities that are needed between different transformations."]],"struct":[["DeadCodeEliminationPass","Aggressive dead code elimination."],["DominatorTreeWriterPass","Wrapper pass that prints out a textual representation of a `DominatorTree`."],["GVNPass","A simple global value numbering pass."],["InstSimplifyPass","A “simplify all the instructions” pass. This is the algebraic simplification pass, although it will do some trivial constant folding as well. This is not a full constant propagation pass, but things like `iadd 1, 1` will be simplified. Notably, it will not simplify any branches, although it may simplify their conditions."],["Mem2RegPass","Promotes `alloca`s that only have `load`s and `store`s as uses into registers. This is effectively an SSA construction pass, it promotes memory operations into SSA values and φ nodes."],["ModuleWriterPass","This is a pass that writes out a textual representation of a module to a given stream."],["SCCPPass","Performs Sparse Conditional Constant Propagation."],["VerifyModulePass","Analysis pass that wraps the [`verify_module`] function."]]};