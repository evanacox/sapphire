//======---------------------------------------------------------------======//
//                                                                           //
// Copyright 2022-2023 Evan Cox <evanacox00@gmail.com>. All rights reserved. //
//                                                                           //
// Use of this source code is governed by a BSD-style license that can be    //
// found in the LICENSE.txt file at the root of this project, or at the      //
// following link: https://opensource.org/licenses/BSD-3-Clause              //
//                                                                           //
//======---------------------------------------------------------------======//

sir = {
    SOI ~
    ((function ~ PATTERN_WHITE_SPACE*) | LINE_COMMENT)* ~
    EOI
}

WHITESPACE = _{ " " | "\t" }
LINE_COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

ident = @{ XID_START ~ (XID_CONTINUE | ".")* }
local = @{ "%" ~ (ident | ASCII_DIGIT+) }
stack = @{ "$" ~ (ident | ASCII_DIGIT+) }
global = @{ "@" ~ ident }

// types
//   - i32, i8, i64
//   - f32, f64
//   - bool
//   - ptr
//   - [T; N]
//   - { T... }
//
bool_ty = @{ "bool" }
ptr_ty = @{ "ptr" }
int_ty = @{ "i" ~ ("8" | "16" | "32" | "64") }
float_ty = @{ "f" ~ ("32" | "64") }
array_ty = { "[" ~ ty ~ ";" ~ int_literal ~ "]" }
ty_list = { (ty ~ ("," ~ ty)*) }
struct_ty = { "{" ~ ty_list ~ "}" }
ty = { bool_ty | ptr_ty | int_ty | float_ty | array_ty | struct_ty }

//
// functions
//   - fn T @name(T, U)
//
variadic = @{ "..." }
abi = @{ "ccc" | "sysv" | "win64" }

ret_attribute = @{ "noalias" | "nonnull" }
ty_or_void_with_attr = { (ret_attribute* ~ ty) | "void" }
param_attribute = { ret_attribute | "byval(" ~ int_literal ~ ")" }
ty_with_param_attributes = { param_attribute* ~ ty }
param_ty_list = { (ty_with_param_attributes ~ ("," ~ ty_with_param_attributes)*) }
param_list = {
     ("(" ~ variadic? ~ ")") |
     ("(" ~ param_ty_list ~ ("," ~ variadic)? ~ ")")
}
function_prototype = { "fn" ~ ty_or_void_with_attr ~ global ~ param_list ~ abi? }
function_body = {
	"{" ~ (NEWLINE | LINE_COMMENT) ~
    (PATTERN_WHITE_SPACE*) ~
    (stack_slot | LINE_COMMENT)* ~
    (PATTERN_WHITE_SPACE*) ~
    (basic_block | LINE_COMMENT)+ ~
    (PATTERN_WHITE_SPACE*) ~
    "}"
}
function = {
    function_prototype ~ function_body? ~ (LINE_COMMENT*) ~ NEWLINE
}

//
// stack slot
//   $0 = stack <ty>
stack_slot = { stack ~ "=" ~ "stack" ~ ty ~ NEWLINE }

//
// single basic block
//   - block:
//       %0 = ...
//
//   - block(T %x):
//       %0 = ...
//
//   - block(T %x, U %y):
//       %0 = ...
//
block_params = { "(" ~ operand ~ ("," ~ operand)* ~ ")" }
block_target = { ident ~ args_with_types? }
block_label = { ident ~ block_params? ~ ":" }
basic_block = {
    block_label ~ (NEWLINE | LINE_COMMENT) ~
    LINE_COMMENT* ~
    (PATTERN_WHITE_SPACE*) ~
 	((inst | LINE_COMMENT) ~ (NEWLINE | LINE_COMMENT))* ~
    (PATTERN_WHITE_SPACE*)
}

// single instruction
//    - %0 = load i32, ptr %p
//
//    - ret void
//
//    - unreachable
//
result = { local ~ "=" }
operand = { ty ~ local }
binary_operands = { local ~ "," ~ local }

inst = {
    call |
    indirectcall |
    icmp |
    fcmp |
    sel |
    br |
    condbr |
    unreachable |
    ret |
    binary_bitwise |
    binary_int |
    fneg |
    binary_float |
    alloca |
    load |
    store |
    offset |
    extract |
    insert |
    elemptr |
    int_conv |
    itob |
    btoi |
    int_to_float |
    float_to_int |
    float_conv |
    itop |
    ptoi |
    iconst |
    fconst |
    bconst |
    undef |
    null |
    stackslot |
    globaladdr
}

// %2 = call i32 @printf(ptr %0, i32 %1)
// call void @foo()
args_with_types = { "(" ~ (operand ~ ("," ~ operand)*)? ~ ")" }
call = { result? ~ "call" ~ ty_or_void_with_attr ~ global ~ args_with_types }

// %2 = indirectcall i32 (ptr, ...)
signature = { ty_or_void_with_attr ~ param_list }
indirectcall = { result? ~ "indirectcall" ~ signature ~ "," ~ ptr_ty ~ local ~ args_with_types }

// %2 = icmp eq i32 %0, %1
icmp_opcode = @{ "eq" | "ne" | "ugt" | "ult" | "uge" | "ule" | "sgt" | "slt" | "sge" | "sle" }
icmp = { result ~ "icmp" ~ icmp_opcode ~ (bool_ty | int_ty | ptr_ty) ~ binary_operands }

// %2 = fcmp oeq f32 %0, %1
fcmp_opcode = @{ "ord" | "uno" | "ueq" | "une" | "ugt" | "ult" | "uge" | "ule" | "oeq" | "one" | "ogt" | "olt" | "oge" | "ole"  }
fcmp = { result ~ "fcmp" ~ fcmp_opcode ~ float_ty ~ binary_operands }

// %3 = sel bool %0, i32 %1, i32 %2
sel = { result ~ "sel" ~ ty ~ "," ~ bool_ty ~ local ~ "," ~ local ~ "," ~ local }

// br loop.head(%0)
// br exit
br = { "br" ~ block_target }

// condbr bool %0, if.true(...), if.false(...)
condbr = { "condbr" ~ bool_ty ~ local ~ "," ~ block_target ~ "," ~ block_target }

// unreachable
unreachable = { "unreachable" }

// ret void
// ret i32 %0
ret = { "ret" ~ ("void" | operand) }

// bitwise instructions, syntax error for non int/bool type
binary_bitwise_opcode = @{ "and" | "or" | "xor" | "shl" | "ashr" | "lshr" }
binary_bitwise = { result ~ binary_bitwise_opcode ~ (bool_ty | int_ty) ~ binary_operands }

// integer arithmetic instructions, syntax error for non int type
binary_int_opcode = @{ "iadd" | "isub" | "imul" | "sdiv" | "udiv" | "srem" | "urem" }
binary_int = { result ~ binary_int_opcode ~ int_ty ~ binary_operands }

// %0 = fneg f32 %0
fneg = { result ~ "fneg" ~ float_ty ~ local }

// floating-point arithmetic instructions, syntax error for non float type
binary_float_opcode = @{ "fadd" | "fsub" | "fmul" | "fdiv" | "frem" }
binary_float = { result ~ binary_float_opcode ~ float_ty ~ binary_operands }

// %0 = alloca T
alloca = { result ~ "alloca" ~ ty }

maybe_volatile = @{ "volatile"? }

// %1 = load T, ptr %0
load = { result ~ "load" ~ maybe_volatile ~ ty ~ "," ~ ptr_ty ~ local }

// store T %0, ptr %1
store = { "store" ~ maybe_volatile ~ operand ~ "," ~ ptr_ty ~ local }

// %2 = offset T, ptr %0, iN %1
offset = { result ~ "offset" ~ ty ~ "," ~ ptr_ty ~ local ~ "," ~ int_ty ~ local }

// %1 = extract { T... } %0, 1
extract = { result ~ "extract" ~ ty ~ "," ~ (struct_ty | array_ty) ~ local ~ "," ~ int_literal }

// %2 = insert { T... } %0, T %1, 1
insert = { result ~ "insert" ~ (struct_ty | array_ty) ~ local ~ "," ~ operand ~ "," ~ int_literal }

// %1 = elemptr { T... }, ptr %0, 1
elemptr = { result ~ "elemptr" ~ (struct_ty | array_ty) ~ "," ~ ptr_ty ~ local ~ "," ~ int_literal }

// %1 = sext/zext/trunc i32, i8 %0
int_conv_opcode = @{ "sext" | "zext" | "trunc" }
int_conv = { result ~ int_conv_opcode ~ int_ty ~ "," ~ int_ty ~ local}

// %1 = itob bool, i32 %0
itob = { result ~ "itob" ~ bool_ty ~ "," ~ int_ty ~ local }

// %1 = btoi i32, bool %0
btoi = { result ~ "btoi" ~ int_ty ~ "," ~ bool_ty ~ local }

// %1 = sitof/uitof f32, i32 %0
int_to_float_opcode = @{ "sitof" | "uitof" }
int_to_float = { result ~ int_to_float_opcode ~ float_ty ~ "," ~ int_ty ~ local }

// %1 = ftosi/ftoui i32, f32 %0
float_to_int_opcode = @{ "ftosi" | "ftoui" }
float_to_int = { result ~ float_to_int_opcode ~ int_ty ~ "," ~ float_ty ~ local }

// %1 = fext/ftrunc f32, f64 %0
float_conv_opcode = @{ "fext" | "ftrunc" }
float_conv = { result ~ float_conv_opcode ~ float_ty ~ "," ~ float_ty ~ local}

// %1 = itop ptr, i32 %0
itop = { result ~ "itop" ~ ptr_ty ~ "," ~ int_ty ~ local }

// %1 = ptoi i32, ptr %0
ptoi = { result ~ "ptoi" ~ int_ty ~ "," ~ ptr_ty ~ local }

// %0 = iconst i32 42
int_literal = @{
    ("0x" ~ ASCII_HEX_DIGIT+) |
    ("0b" ~ ASCII_BIN_DIGIT+) |
    ("0o" ~ ASCII_OCT_DIGIT+) |
    ("-"? ~ ASCII_DIGIT+)
}
iconst = { result ~ "iconst" ~ int_ty ~ int_literal }

// %0 = fconst f32 1.58329e-9
float_standard = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
float_raw = @{
    "0xfp" ~ ASCII_HEX_DIGIT+
}
float_literal = @{ float_raw | float_standard | "NaN" }
fconst = { result ~ "fconst" ~ float_ty ~ float_literal }

// %0 = bconst bool true
bool_literal = @{ "true" | "false" }
bconst = { result ~ "bconst" ~ bool_ty ~ bool_literal }

// %0 = undef { T... }
undef = { result ~ "undef" ~ ty }

// %0 = null i32
null = { result ~ "null" ~ ty }

// %0 = stackslot
stackslot = { result ~ "stackslot" ~ stack }

// %0 = globaladdr @printf
globaladdr = { result ~ "globaladdr" ~ global }
